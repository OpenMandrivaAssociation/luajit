From c4fea6f6413eff322d8a3b50aaae03662c875b79 Mon Sep 17 00:00:00 2001
From: gns <infiwang@pm.me>
Date: Wed, 31 May 2023 13:16:32 +0800
Subject: [PATCH 104/156] riscv(interp): conditional select optimizations

This is a WIP, archive only.
---
 src/vm_riscv64.dasc | 69 ++++++++++++++++++---------------------------
 1 file changed, 27 insertions(+), 42 deletions(-)

diff --git a/src/vm_riscv64.dasc b/src/vm_riscv64.dasc
index b76fcb61..385d41d8 100644
--- a/src/vm_riscv64.dasc
+++ b/src/vm_riscv64.dasc
@@ -2743,14 +2743,11 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |  slt TMP1, CARG1, CARG2
     |  addw TMP2, TMP2, TMP3		// TMP2=(jump-0x8000)<<2
     if (op == BC_ISLT || op == BC_ISGT) {
-      |  snez TMP4, TMP1
-      |  neg TMP4, TMP4
-      |  and TMP2, TMP2, TMP4
+      |  neg TMP1, TMP1
     } else {
-      |  seqz TMP4, TMP1
-      |  neg TMP4, TMP4
-      |  and TMP2, TMP2, TMP4
+      |  addi TMP1, TMP1, -1
     }
+    |  and TMP2, TMP2, TMP1
     |1:
     |  add PC, PC, TMP2
     |  ins_next
@@ -2766,21 +2763,20 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |  fmv.d.x FTMP2, CARG2
     |3:  // RA and RD are both numbers.
     |  addw TMP2, TMP2, TMP3
-    if (op == BC_ISLT || op == BC_ISGE) {
+    if (op == BC_ISLT) {
       |  flt.d TMP3, FTMP0, FTMP2
-    } else {
+      |  neg TMP3, TMP3
+    } else if (op == BC_ISGE) {
+      |  flt.d TMP3, FTMP0, FTMP2
+      |  addi TMP3, TMP3, -1
+    } else if (op == BC_ISLE) {
       |  fle.d TMP3, FTMP2, FTMP0
-      |  seqz TMP3, TMP3
-    }
-    if (op == BC_ISLT || op == BC_ISGT) {
-      |  snez TMP4, TMP3
-      |  neg TMP4, TMP4
-      |  and TMP2, TMP2, TMP4
-    } else {
-      |  seqz TMP4, TMP3
-      |  neg TMP4, TMP4
-      |  and TMP2, TMP2, TMP4
+      |  neg TMP3, TMP3
+    } else if (op == BC_ISGT) {
+      |  fle.d TMP3, FTMP2, FTMP0
+      |  addi TMP3, TMP3, -1
     }
+    |  and TMP2, TMP2, TMP3
     |  j <1
     |
     |4:  // RA is a number, RD is not a number.
@@ -2905,13 +2901,11 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |   addw TMP2, TMP2, TMP3
     if (vk) {
       |  seqz TMP4, TMP0
-      |  neg TMP4, TMP4
-      |  and TMP2, TMP2, TMP4
     } else {
       |  snez TMP4, TMP0
-      |  neg TMP4, TMP4
-      |  and TMP2, TMP2, TMP4
     }
+    |  neg TMP4, TMP4
+    |  and TMP2, TMP2, TMP4
     |  add PC, PC, TMP2
     |  ins_next
     break;
@@ -3016,13 +3010,11 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |  addw TMP2, TMP2, TMP3		// TMP2=(jump-0x8000)<<2
     if (vk) {
       |  seqz TMP4, TMP0
-      |  neg TMP4, TMP4
-      |  and TMP2, TMP2, TMP4
     } else {
       |  snez TMP4, TMP0
-      |  neg TMP4, TMP4
-      |  and TMP2, TMP2, TMP4
     }
+    |  neg TMP4, TMP4
+    |  and TMP2, TMP2, TMP4
     |  add PC, PC, TMP2
     |  ins_next
     break;
@@ -4373,8 +4365,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
       |   bfextri TMP0, CARG2, 31, 31	// sign
       |  slt CARG2, CARG3, CARG4
       |  slt TMP1, CARG4, CARG3
-      |  snez TMP4, TMP0
-      |  neg TMP4, TMP4
+      |  neg TMP4, TMP0
       |  and TMP1, TMP1, TMP4
       |  not TMP4, TMP4
       |  and CARG2, CARG2, TMP4
@@ -4389,8 +4380,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
       |  slt CARG3, CARG3, CARG1	// stop < start+step ?
       |  sltz TMP0, CARG5		// step < 0 ?
       |   sltz TMP3, TMP3		// ((y^a) & (y^b)) < 0: overflow.
-      |  snez TMP4, TMP0
-      |  neg TMP4, TMP4
+      |  neg TMP4, TMP0
       |  and TMP1, TMP1, TMP4
       |  not TMP4, TMP4
       |  and CARG3, CARG3, TMP4
@@ -4402,16 +4392,14 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     }
     |1:
     if (op == BC_FORI) {
-      |  snez TMP4, CARG2	// CARG2!=0: jump out the loop; CARG2==0: next INS
-      |  neg TMP4, TMP4
+      |  neg TMP4, CARG2	// CARG2!=0: jump out the loop; CARG2==0: next INS
       |  and TMP2, TMP2, TMP4
       |  add PC, PC, TMP2
     } else if (op == BC_JFORI) {
       |  add PC, PC, TMP2
       |  lhu RD, -4+OFS_RD(PC)
     } else if (op == BC_IFORL) {
-      |  seqz TMP4, CARG2	// CARG2!=0: next INS; CARG2==0: jump back
-      |  neg TMP4, TMP4
+      |  addi TMP4, CARG2, -1	// CARG2!=0: next INS; CARG2==0: jump back
       |  and TMP2, TMP2, TMP4
       |  add PC, PC, TMP2
     }
@@ -4456,8 +4444,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
       |  and TMP4, TMP4, CARG2
       |  or CARG2, TMP3, TMP4
       if (op == BC_IFORL) {
-  |  seqz TMP3, CARG2
-  |  neg TMP3, TMP3
+  |  addi TMP3, CARG2, -1
   |  and TMP2, TMP2, TMP3
 	|  add PC, PC, TMP2
       }
@@ -4601,11 +4588,10 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |    addi TMP1, TMP1, 8
     |    addiw TMP2, TMP2, -1
     |  beqz CARG2, >3
-    |  seqz TMP4, CARG2		// Clear old fixarg slot (help the GC).
-    |  neg TMP4, TMP4
-    |  and CARG1, CARG1, TMP4
-    |  not TMP4, TMP4
+    |  neg TMP4, CARG2		// Clear old fixarg slot (help the GC).
     |  and TMP3, TISNIL, TMP4
+    |  not TMP4, TMP4
+    |  and CARG1, CARG1, TMP4
     |  or CARG1, CARG1, TMP3
     |  sd CARG1, -8(RA)
     |  sd TMP0, 8(TMP1)
@@ -4613,8 +4599,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |2:
     |  ins_next2
     |3:
-    |  snez TMP4, CARG2		// Clear missing fixargs.
-    |  neg TMP4, TMP4
+    |  neg TMP4, CARG2		// Clear missing fixargs.
     |  and TMP0, TMP0, TMP4
     |  not TMP4, TMP4
     |  and TMP3, TISNIL, TMP4
-- 
2.42.0

