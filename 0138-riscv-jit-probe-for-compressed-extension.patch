From f137810a7b55cf682adae377f48d1f88ad287b2d Mon Sep 17 00:00:00 2001
From: gns <infiwang@pm.me>
Date: Mon, 3 Jul 2023 12:17:57 +0800
Subject: [PATCH 138/156] riscv(jit): probe for compressed extension

---
 src/lib_jit.c | 27 ++++++++++++++++++++-------
 1 file changed, 20 insertions(+), 7 deletions(-)

diff --git a/src/lib_jit.c b/src/lib_jit.c
index 4a757ffc..0fdf5f89 100644
--- a/src/lib_jit.c
+++ b/src/lib_jit.c
@@ -656,7 +656,20 @@ static void detect_sigill(int sig) {
   siglongjmp(sigbuf, 1);
 }
 
-static int rvzba() {
+static int riscv_compressed() {
+#if defined(__riscv_compressed)
+  // Don't bother checking for RVC -- would crash before getting here.
+  return 1;
+#elif defined(__GNUC__)
+  // c.nop; c.nop
+  __asm__(".4byte 0x00010001");
+  return 1;
+#else
+  return 0;
+#endif
+}
+
+static int riscv_zba() {
 #if defined(__GNUC__)
   // Don't bother verifying the result, just check if the instruction exists.
   // add.uw zero, zero, zero
@@ -667,7 +680,7 @@ static int rvzba() {
 #endif
 }
 
-static int rvzbb() {
+static int riscv_zbb() {
 #if defined(__GNUC__)
   register int t asm ("a0");
   // addi a0, zero, 255; sext.b a0, a0;
@@ -758,17 +771,17 @@ static uint32_t jit_cpudetect(void)
 
 #elif LJ_TARGET_RISCV64
 #if LJ_HASJIT
-  // SIGILL-based detection of Zba and Zbb. Welcome to the future.
+  // SIGILL-based detection of RVC, Zba and Zbb. Welcome to the future.
 
   struct sigaction old = {0}, act = {0};
   act.sa_handler = detect_sigill;
   sigaction(SIGILL, &act, &old);
-  flags |= riscv_probe(rvzba, JIT_F_RVZba);
-  flags |= riscv_probe(rvzbb, JIT_F_RVZbb);
+  flags |= riscv_probe(riscv_compressed, JIT_F_RVC);
+  flags |= riscv_probe(riscv_zba, JIT_F_RVZba);
+  flags |= riscv_probe(riscv_zbb, JIT_F_RVZbb);
   sigaction(SIGILL, &old, NULL);
 
-  // Detect C/V/P?
-  // C would need a chunk of mmap memory, and we don't really care about C currently.
+  // Detect V/P?
   // V have no hardware available, P not ratified yet.
 #endif
 
-- 
2.42.0

