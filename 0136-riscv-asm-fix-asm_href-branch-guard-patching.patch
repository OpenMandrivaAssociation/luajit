From 55507d561c1da192c395307dc72247e40cdcf0fb Mon Sep 17 00:00:00 2001
From: gns <infiwang@pm.me>
Date: Mon, 3 Jul 2023 01:32:23 +0800
Subject: [PATCH 136/156] riscv(asm): fix asm_href branch guard patching

---
 src/lj_asm_riscv64.h | 16 +++++++---------
 src/lj_emit_riscv.h  |  4 ++--
 2 files changed, 9 insertions(+), 11 deletions(-)

diff --git a/src/lj_asm_riscv64.h b/src/lj_asm_riscv64.h
index 326a50f2..6f32d375 100644
--- a/src/lj_asm_riscv64.h
+++ b/src/lj_asm_riscv64.h
@@ -704,16 +704,14 @@ static void asm_href(ASMState *as, IRIns *ir, IROp merge)
     l_end = asm_exitstub_addr(as, as->snapno);
   }
   if (irt_isnum(kt)) {
-    emit_branch(as, RISCVI_BNE, tmp1, RID_ZERO, l_end);
-    emit_du(as, RISCVI_LUI, RID_TMP, as->snapno);
+    emit_branch(as, RISCVI_BNE, tmp1, RID_ZERO, l_end, 1);
     emit_ds1s2(as, RISCVI_FEQ_D, tmp1, tmpnum, key);
-    emit_branch(as, RISCVI_BEQ, tmp1, RID_ZERO, l_next);
+    emit_branch(as, RISCVI_BEQ, tmp1, RID_ZERO, l_next, 0);
     emit_dsi(as, RISCVI_SLTIU, tmp1, tmp1, ((int32_t)LJ_TISNUM));
     emit_dsshamt(as, RISCVI_SRAI, tmp1, tmp1, 47);
     emit_ds(as, RISCVI_FMV_D_X, tmpnum, tmp1);
   } else {
-    emit_branch(as, RISCVI_BEQ, tmp1, cmp64, l_end);
-    emit_du(as, RISCVI_LUI, RID_TMP, as->snapno);
+    emit_branch(as, RISCVI_BEQ, tmp1, cmp64, l_end, 1);
   }
   emit_lso(as, RISCVI_LD, tmp1, dest, (int32_t)offsetof(Node, key.u64));
   *l_loop = RISCVI_BNE | RISCVF_S1(tmp1) | RISCVF_S2(RID_ZERO)
@@ -1160,7 +1158,7 @@ static void asm_tbar(ASMState *as, IRIns *ir)
   emit_lso(as, RISCVI_SB, mark, tab, (int32_t)offsetof(GCtab, marked));
   emit_setgl(as, tab, gc.grayagain);	// make tab gray again
   emit_getgl(as, link, gc.grayagain);
-  emit_branch(as, RISCVI_BEQ, RID_TMP, RID_ZERO, l_end);	// black: not jump
+  emit_branch(as, RISCVI_BEQ, RID_TMP, RID_ZERO, l_end, 0);	// black: not jump
   emit_ds1s2(as, RISCVI_XOR, mark, mark, RID_TMP);	// mark=0: gray
   emit_dsi(as, RISCVI_ANDI, RID_TMP, mark, LJ_GC_BLACK);
   emit_lso(as, RISCVI_LBU, mark, tab, ((int32_t)offsetof(GCtab, marked)));
@@ -1182,8 +1180,8 @@ static void asm_obar(ASMState *as, IRIns *ir)
   emit_ds(as, RISCVI_MV, ra_releasetmp(as, ASMREF_TMP1), RID_GL);
   obj = IR(ir->op1)->r;
   tmp = ra_scratch(as, rset_exclude(RSET_GPR, obj));
-  emit_branch(as, RISCVI_BEQ, tmp, RID_ZERO, l_end);
-  emit_branch(as, RISCVI_BEQ, RID_TMP, RID_ZERO, l_end);	// black: jump
+  emit_branch(as, RISCVI_BEQ, tmp, RID_ZERO, l_end, 0);
+  emit_branch(as, RISCVI_BEQ, RID_TMP, RID_ZERO, l_end, 0);	// black: jump
   emit_dsi(as, RISCVI_ANDI, tmp, tmp, LJ_GC_BLACK);
   emit_dsi(as, RISCVI_ANDI, RID_TMP, RID_TMP, LJ_GC_WHITES);
   val = ra_alloc1(as, ir->op2, rset_exclude(RSET_GPR, obj));
@@ -1748,7 +1746,7 @@ static void asm_gc_check(ASMState *as)
   tmp = ra_releasetmp(as, ASMREF_TMP2);
   emit_loadi(as, tmp, as->gcsteps);
   /* Jump around GC step if GC total < GC threshold. */
-  emit_branch(as, RISCVI_BLTU, RID_TMP, tmp, l_end);
+  emit_branch(as, RISCVI_BLTU, RID_TMP, tmp, l_end, 0);
   emit_getgl(as, tmp, gc.threshold);
   emit_getgl(as, RID_TMP, gc.total);
   as->gcsteps = 0;
diff --git a/src/lj_emit_riscv.h b/src/lj_emit_riscv.h
index 5996554a..b2f85c2d 100644
--- a/src/lj_emit_riscv.h
+++ b/src/lj_emit_riscv.h
@@ -308,13 +308,13 @@ typedef MCode *MCLabel;
 /* Return label pointing to current PC. */
 #define emit_label(as)		((as)->mcp)
 
-static void emit_branch(ASMState *as, RISCVIns riscvi, Reg rs1, Reg rs2, MCode *target)
+static void emit_branch(ASMState *as, RISCVIns riscvi, Reg rs1, Reg rs2, MCode *target, int jump)
 {
   MCode *p = as->mcp;
   ptrdiff_t delta = (char *)target - (char *)(p - 1);
   // lj_assertA(((delta + 0x10000) >> 13) == 0, "branch target out of range"); /* B */
   lj_assertA(((delta + 0x100000) >> 21) == 0, "branch target out of range"); /* ^B+J */
-  if (checki13(delta)) {
+  if (checki13(delta) && !jump) {
     *--p = riscvi | RISCVF_S1(rs1) | RISCVF_S2(rs2) | RISCVF_IMMB(delta);
     *--p = RISCVI_NOP;
   } else {
-- 
2.42.0

