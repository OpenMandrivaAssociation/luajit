From 8ebee644dd5f3b3e43f6ffa095f5a7421f96e7b4 Mon Sep 17 00:00:00 2001
From: Raymond Wong <infiwang@pm.me>
Date: Mon, 13 Feb 2023 22:20:22 +0800
Subject: [PATCH 031/156] riscv(emit): polish rot/lsptr/opk/lso/branch/jmp

Migrate from JGL to GL, dropped fixed x5, overall polish.

This is a WIP, archive only.
---
 src/lj_emit_riscv.h | 172 ++++++++++++++++----------------------------
 1 file changed, 62 insertions(+), 110 deletions(-)

diff --git a/src/lj_emit_riscv.h b/src/lj_emit_riscv.h
index ae85bf3e..762499b3 100644
--- a/src/lj_emit_riscv.h
+++ b/src/lj_emit_riscv.h
@@ -31,7 +31,7 @@ static void emit_r(ASMState *as, RISCVIns riscvi, Reg rd, Reg rs1, Reg rs2)
 }
 
 #define emit_ds(as, riscvi, rd, rs1)         emit_r(as, riscvi, rd, rs1, 0)
-#define emit_ds2(as, riscvi, rd, rs2)         emit_r(as, riscvi, rd, 0, rs1)
+#define emit_ds2(as, riscvi, rd, rs2)         emit_r(as, riscvi, rd, 0, rs2)
 #define emit_ds1s2(as, riscvi, rd, rs1, rs2)         emit_r(as, riscvi, rd, rs1, rs2)
 
 static void emit_r4(ASMState *as, RISCVIns riscvi, Reg rd, Reg rs1, Reg rs2, Reg rs3)
@@ -66,11 +66,28 @@ static void emit_u(ASMState *as, RISCVIns riscvi, Reg rd, int32_t i)
   *--as->mcp = riscvi | RISCVF_RD(rd) | RISCVF_IMMU(i & 0xfffff);
 }
 
+#define emit_du(as, riscvi, rd, i)           emit_u(as, riscvi, rd, i)
+
 static void emit_j(ASMState *as, RISCVIns riscvi, Reg rd, int32_t i)
 {
   *--as->mcp = riscvi | RISCVF_RD(rd) | RISCVF_IMMJ(i & 0x1fffffe);
 }
 
+static void emit_lso(ASMState *as, RISCVIns riscvi, Reg dest, Reg src, int64_t ofs)
+{
+  lj_assertA(checki12(ofs), "load/store offset %d out of range", ofs);
+  switch (riscvi) {
+    case RISCVI_LD: case RISCVI_LW: case RISCVI_LH: case RISCVI_LB:
+    case RISCVI_LWU: case RISCVI_LHU: case RISCVI_LBU:
+      emit_dsi(as, riscvi, dest, src, ofs);
+      break;
+    case RISCVI_SD: case RISCVI_SW: case RISCVI_SH: case RISCVI_SB:
+      emit_s1s2i(as, riscvi, dest, src, i);
+      break;
+    default: lj_assertA(0, "invalid lso"); break;
+  }
+}
+
 static void emit_roti(ASMState *as, RISCVIns riscvi, Reg rd, Reg rs1, int32_t shamt, RegSet allow)
 {
   if (as->flags & JIT_F_RVB) {
@@ -104,11 +121,7 @@ static void emit_rot(ASMState *as, RISCVIns riscvi, Reg rd, Reg rs1, Reg rs2, Re
     emit_ds1s2(as, riscvi, rd, rs1, rs2);
   } else {
     RISCVIns sai, sbi;
-    allow = rset_exclude(allow, RID2RSET(rd));
-    allow = rset_exclude(allow, RID2RSET(rs1));
-    allow = rset_exclude(allow, RID2RSET(rs2));
-    Reg nsh = ra_scratch(as, allow),
-        tmp = ra_scratch(as, rset_exclude(allow, (nsh)));
+    Reg tmp = ra_scratch(as, rset_exclude(allow, rd));
     switch (riscvi) {
       case RISCVI_ROL:
         ai = RISCVI_SLL, bi = RISCVI_SRL;
@@ -127,9 +140,9 @@ static void emit_rot(ASMState *as, RISCVIns riscvi, Reg rd, Reg rs1, Reg rs2, Re
         return;
     }
     emit_ds1s2(as, RISCVI_OR, rd, rd, tmp);
-    emit_ds1s2(as, sbi, rd, rs1, nsh);
+    emit_ds1s2(as, sbi, rd, rs1, rd);
     emit_ds1s2(as, sai, tmp, rs1, rs2);
-    emit_ds2(as, RISCVI_NEG, nsh, rs2);
+    emit_ds2(as, RISCVI_NEG, rd, rs2);
   }
 }
 
@@ -139,61 +152,49 @@ static void emit_ext(ASMState *as, RISCVIns riscvi, Reg rd, Reg rs1)
     emit_ds(as, riscvi, rd, rs1);
   } else {
     RISCVIns sli, sri;
-    int32_t slamt, sramt;
+    int32_t shamt;
     switch (riscvi) {
       case RISCVI_ZEXT_B:
       case RISCVI_SEXT_W:
         emit_ds(as, riscvi, rd, rs1);
         return;
       case RISCVI_ZEXT_H:
-        sli = RISCVI_SLLI;
-        sri = RISCVI_SRLI;
-        slamt = sramt = 48;
+        sli = RISCVI_SLLI, sri = RISCVI_SRLI;
+        shamt = 48;
         break;
       case RISCV_ZEXT_W:
-        sli = RISCVI_SLLI;
-        sri = RISCVI_SRLI;
-        slamt = sramt = 32;
+        sli = RISCVI_SLLI, sri = RISCVI_SRLI;
+        shamt = 32;
         break;
       case RISCVI_SEXT_B:
-        sli = RISCVI_SLLI;
-        sri = RISCVI_SRAI;
-        slamt = sramt = 56;
+        sli = RISCVI_SLLI, sri = RISCVI_SRAI;
+        shamt = 56;
         break;
       case RISCVI_SEXT_H:
-        sli = RISCVI_SLLI;
-        sri = RISCVI_SRAI;
-        slamt = sramt = 48;
+        sli = RISCVI_SLLI, sri = RISCVI_SRAI;
+        shamt = 48;
         break;
       default:
         lj_assertA(0, "invalid ext op");
     }
-    emit_dsshamt(as, sri, rd, rd, sramt);   
-    emit_dsshamt(as, sli, rd, rs1, slamt);
+    emit_dsshamt(as, sri, rd, rd, shamt);   
+    emit_dsshamt(as, sli, rd, rs1, shamt);
   }
 }
 
-#define checki12(x)	RISCVF_SIMM_OK(x, 12)
-#define checku12(x)	((x) == ((x) & 0xfff))
-#define checki20(x)	RISCVF_SIMM_OK(x, 20)
-#define checku20(x)	((x) == ((x) & 0xfffff))
-#define checki21(x)	RISCVF_SIMM_OK(x, 20)
-#define checki32(x) RISCVF_SIMM_OK(x, 32)
-#define checki33(x) RISCVF_SIMM_OK(x, 33)
-
 static Reg ra_allock(ASMState *as, intptr_t k, RegSet allow);
 static void ra_allockreg(ASMState *as, intptr_t k, Reg r);
 static Reg ra_scratch(ASMState *as, RegSet allow);
 
 static void emit_loadk12(ASMState *as, Reg rd, int32_t i)
 {
-  emit_i_dsi(as, RISCVI_ADDI, rd, rd, i);
+  emit_dsi(as, RISCVI_ADDI, rd, rd, i);
 }
 
 static void emit_loadk20(ASMState *as, Reg rd, int32_t i)
 {
-  emit_dsshamt(as, RISCVI_SRAI_D, rd, rd, 12);
-  emit_u(as, RISCVI_LUI, rd, (i&0xfffff));
+  emit_dsshamt(as, RISCVI_SRAIW, rd, rd, 12);
+  emit_du(as, RISCVI_LUI, rd, i);
 }
 
 static void emit_loadk32(ASMState *as, Reg rd, int32_t i)
@@ -201,8 +202,8 @@ static void emit_loadk32(ASMState *as, Reg rd, int32_t i)
   if (checki12(i)) {
     emit_di12(as, rd, i);
   } else {
-    emit_i_dsi(as, RISCVI_ADDI, rd, rd, RISCVF_LO(i));
-    emit_u_di(as, RISCVI_LUI, rd, RISCVF_HI(i));
+    emit_dsi(as, RISCVI_ADDI, rd, rd, RISCVF_LO(i));
+    emit_du(as, RISCVI_LUI, rd, RISCVF_HI(i));
   }
 }
 
@@ -236,16 +237,7 @@ static void emit_loadu64(ASMState *as, Reg r, uint64_t u64)
 /* Get/set from constant pointer. */
 static void emit_lsptr(ASMState *as, RISCVIns riscvi, Reg r, void *p, RegSet allow)
 {
-  intptr_t jgl = (intptr_t)(J2G(as->J));
-  intptr_t i = (intptr_t)(p);
-  Reg base;
-  // if ((uint32_t)(i-jgl) < 65536) {
-  //   i = i-jgl-32768;
-  //   base = RID_JGL;
-  // } else {
-    base = ra_allock(as, RISCVF_W_HI(i), allow);
-  // }
-  emit_lso(as, riscvi, r, base, i);
+  emit_lso(as, riscvi, r, ra_allock(as, igcptr(p), allow), 0);
 }
 
 /* Load 64 bit IR constant into register. */
@@ -257,35 +249,19 @@ static void emit_loadk64(ASMState *as, Reg r, IRIns *ir)
     r64 = RID_TMP;
     emit_ds(as, RISCVI_FMV_D_X, r, r64);
   }
-  if ((uint32_t)((intptr_t)k-(intptr_t)J2G(as->J)) < 65536)
-    emit_lsptr(as, RISCVI_LD, r64, (void *)k, 0);	/*To copy a doubleword from a GPR to an FPR*/
-  else
-    emit_loadu64(as, r64, *k);
+  emit_loadu64(as, r64, *k);
 }
 
 /* Get/set global_State fields. */
 static void emit_lsglptr(ASMState *as, RISCVIns riscvi, Reg r, int32_t ofs, RegSet allow)
 {
-  Reg base;
-  // if ((uint32_t)(ofs) < 65536) {
-  //   ofs = ofs-32768;
-  //   base = RID_JGL;
-  // } else {
-  //   base = ra_allock(as, RISCVF_W_HI(i), allow);
-  // }
-  // emit_lso(as, riscvi, r, base, (ofs-32768));
-  emit_lso(as, riscvi, r, RID_JGL, ofs-32768);
+  emit_lso(as, riscvi, r, RID_GL, ofs);
 }
 
-// TODO: migrate JGL to GL? RV LSO offset is rather short.
 #define emit_getgl(as, r, field) \
   emit_lsglptr(as, RISCVI_LD, (r), (int32_t)offsetof(global_State, field))
 #define emit_setgl(as, r, field) \
   emit_lsglptr(as, RISCVI_SD, (r), (int32_t)offsetof(global_State, field))
-// #define emit_getgl(as, r, field) \
-//   emit_lsptr(as, RISCVI_LD, (r), (void *)&J2G(as->J)->field)
-// #define emit_setgl(as, r, field) \
-//   emit_lsptr(as, RISCVI_SD, (r), (void *)&J2G(as->J)->field)
 
 /* Trace number is determined from per-trace exit stubs. */
 #define emit_setvmstate(as, i)		UNUSED(i)
@@ -301,13 +277,14 @@ typedef MCode *MCLabel;
 static void emit_branch(ASMState *as, RISCVIns riscvi, Reg rs1, Reg rs2, MCode *target)
 {
   MCode *p = as->mcp;
-  ptrdiff_t delta = target - p;
+  ptrdiff_t delta = target - (p - 2);
   // lj_assertA(((delta + 0x10000) >> 13) == 0, "branch target out of range"); /* B */
-  lj_assertA((((delta-4) + 0x100000) >> 21) == 0, "branch target out of range"); /* ^B+J */
+  lj_assertA(((delta + 0x100000) >> 21) == 0, "branch target out of range"); /* ^B+J */
   if (checki13(delta)) {
     *--p = riscvi | RISCVF_S1(rs1) | RISCVF_S2(rs2) | RISCVF_IMMB(delta);
+    *--p = RISCVI_NOP;
   } else {
-    *--p = RISCVI_JAL | RISCVF_D(RID_ZERO) | RISCVF_IMMJ(delta-4); /* Poorman's trampoline */
+    *--p = RISCVI_JAL | RISCVF_IMMJ(delta); /* Poorman's trampoline */
     *--p = (riscvi^0x00001000) | RISCVF_S1(rs1) | RISCVF_S2(rs2) | RISCVF_IMMB(8);
   }
   as->mcp = p;
@@ -315,17 +292,17 @@ static void emit_branch(ASMState *as, RISCVIns riscvi, Reg rs1, Reg rs2, MCode *
 
 static void emit_jmp(ASMState *as, MCode *target)
 {
-  // TODO: allocate RID_CFUNCADDR like MIPS call
   MCode *p = as->mcp;
-  ptrdiff_t delta = target - p;
+  ptrdiff_t delta = target - (p - 1);
   // lj_assertA(((delta + 0x100000) >> 21) == 0, "jump target out of range"); /* J */
-  lj_assertA(checki32(delta) == 0, "jump target out of range"); /* AUIPC+JALR */
+  lj_assertA(checki32(delta), "jump target out of range"); /* AUIPC+JALR */
   if (checki21(delta)) {
-    emit_j_di(as, RISCVI_JAL, RID_ZERO, delta);
+    *--p = RISCVI_NOP;
+    *--p = RISCVI_JAL | RISCVF_IMMJ(delta);
   } else {
-    Reg tmp = ra_scratch(as, RSET_GPR);
-    emit_dsi(as, RISCVI_JALR, RID_ZERO, RID_CFUNCADDR, RISCVF_LO(delta));
-    emit_u(as, RISCVI_AUIPC, RID_CFUNCADDR, RISCVF_HI(delta));
+    ra_scratch(as, RID_CFUNCADDR);
+    *--p = RISCVI_JALR | RISCVF_S1(RID_CFUNCADDR) | RISCVF_IMMI(RISCVI_LO(delta));
+    *--p = RISCVI_AUIPC | RISCVF_D(RID_CFUNCADDR) | RISCVF_IMMU(RISCVI_HI(delta));
   }
 }
 
@@ -334,24 +311,22 @@ static void emit_jmp(ASMState *as, MCode *target)
 
 static void emit_call(ASMState *as, void *target, int needcfa)
 {
-  // TODO: allocate RID_CFUNCADDR like MIPS
   MCode *p = as->mcp;
-  ptrdiff_t delta = (char *)target - ((char *)p);
+  ptrdiff_t delta = (char *)target - ((char *)(p - 1));
   if (checki21(delta)) {
     *--p = RISCVI_JAL | RISCVF_D(RID_RA) | RISCVF_IMMJ(delta);
   } else if (checki32(delta)) {
-    *--p = RISCVI_JALR | RISCVF_D(RID_RA) | RISCVF_S1(RID_CFUNADDR) | RISCVF_IMMI(RISCVF_LI_LO(delta));
-    *--p = RISCVI_AUIPC | RISCVF_D(RID_CFUNCADDR) | RISCVF_IMMU(RISCVF_LI_HI(delta));
+    *--p = RISCVI_JALR | RISCVF_D(RID_RA) | RISCVF_S1(RID_CFUNCADDR) | RISCVF_IMMI(RISCVF_LO(delta));
+    *--p = RISCVI_AUIPC | RISCVF_D(RID_CFUNCADDR) | RISCVF_IMMU(RISCVF_HI(delta));
     needcfa = 1;
   } else {
     *--p = RISCVI_JALR | RISCVF_D(RID_RA) | RISCVF_S1(RID_CFUNCADDR) | RISCVF_IMMI(0);
     needcfa = 2;
   }
   if (needcfa > 1)
-    // ra_allockreg(as, (intptr_t)target, RID_CFUNCADDR);
-    emit_loada(as, RID_CFUNCADDR, (intptr_t)target); 
+    ra_allockreg(as, (intptr_t)target, RID_CFUNCADDR); 
   else if (needcfa > 0)
-    // ra_scratch(as, RID_CFUNCADDR);
+    ra_scratch(as, RID_CFUNCADDR);
 }
 
 /* -- Emit generic operations --------------------------------------------- */
@@ -372,12 +347,15 @@ static void emit_movrr(ASMState *as, IRIns *ir, Reg dst, Reg src)
 /* Emit an arithmetic operation with a constant operand. */
 static void emit_opk(ASMState *as, RISCVIns riscvi, Reg dest, Reg src, int32_t i)
 {
-  if ((((riscvi != RISCVI_ORI) && (riscvi != RISCVI_XORI)) && checki12(i)) ||
-      (((riscvi == RISCVI_ORI) || (riscvi == RISCVI_XORI)) && checki12(i << 1))) {
+  if (((riscvi == RISCVI_ADDI) && checki12(i)) ||
+      (((riscvi == RISCVI_XORI) || (riscvi == RISCVI_ORI)) &&
+       (i >= 0 ? checki12(i << 1) : checki12(i))) ||
+      ((riscvi == RISCVI_ANDI) &&
+       (i >= 0 ? checki12(i) : checki12(i << 1)))) {
     emit_dsi(as, riscvi, dest, src, i);
   } else {
     switch (riscvi) {
-      case RISCVI_ADDI: riscvi = i >= 0 ? RISCVI_ADD : RISCVI_SUB; break;
+      case RISCVI_ADDI: riscvi = RISCVI_ADD; break;
       case RISCVI_XORI: riscvi = RISCVI_XOR; break;
       case RISCVI_ORI: riscvi = RISCVI_OR; break;
       case RISCVI_ANDI: riscvi = RISCVI_AND; break;
@@ -388,32 +366,6 @@ static void emit_opk(ASMState *as, RISCVIns riscvi, Reg dest, Reg src, int32_t i
   }
 }
 
-static void emit_lso(ASMState *as, RISCVIns riscvi, Reg dest, Reg src, int64_t ofs)
-{
-  // lj_assertA(checki12(ofs), "load/store offset %d out of range", ofs);
-  // TODO: Rewrite referring to arm and arm64, allocate a register for ofs
-  switch (riscvi) {
-    case RISCVI_LD: case RISCVI_LW: case RISCVI_LH: case RISCVI_LB:
-    case RISCVI_LWU: case RISCVI_LHU: case RISCVI_LBU:
-      if (checki12(i))
-        emit_dsi(as, riscvi, dest, src, ofs);
-      else
-        emit_dsi(as, riscvi, dest, dest, 0);
-        emit_ds1s2(as, dest, dest, src);
-        emit_loadi(as, dest, i);
-      break;
-    case RISCVI_SD: case RISCVI_SW: case RISCVI_SH: case RISCVI_SB:
-      if (checki12(i))
-        emit_s1s2i(as, riscvi, dest, src, i);
-      else
-        emit_s1s2i(as, riscvi, dest, RID_CFUNCADDR, 0);
-        emit_ds1s2(as, RID_CFUNCADDR, RID_CFUNCADDR, src);
-        emit_loadi(as, RID_CFUNCADDR, i);
-      break;
-    default: lj_assertA(0, "invalid lso"); break;
-  }
-}
-
 /* Generic load of register with base and (small) offset address. */
 static void emit_loadofs(ASMState *as, IRIns *ir, Reg r, Reg base, int32_t ofs)
 {
-- 
2.42.0

