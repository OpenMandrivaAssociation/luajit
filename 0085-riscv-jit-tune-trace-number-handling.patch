From a04a0d617e13ea462a5be7fac55a2d5835bc490f Mon Sep 17 00:00:00 2001
From: Raymond Wong <infiwang@pm.me>
Date: Mon, 17 Apr 2023 01:28:00 +0800
Subject: [PATCH 085/156] riscv(jit): tune trace number handling

Load trace number using LUI, avoids potential overflow.

This is a WIP, archive only.
---
 src/lj_asm_riscv64.h | 5 ++---
 src/vm_riscv64.dasc  | 1 +
 2 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/src/lj_asm_riscv64.h b/src/lj_asm_riscv64.h
index e68ece3e..6f923f18 100644
--- a/src/lj_asm_riscv64.h
+++ b/src/lj_asm_riscv64.h
@@ -138,7 +138,7 @@ static void asm_guard(ASMState *as, RISCVIns riscvi, Reg rs1, Reg rs2)
     target = p - 1;  /* Patch target later in asm_loop_fixup. */
   }
     emit_branch(as, riscvi, rs1, rs2, target);
-    emit_dsi(as, RISCVI_ADDI, RID_TMP, RID_ZERO, as->snapno);  /* TODO: overflow? */
+    emit_du(as, RISCVI_LUI, RID_TMP, as->snapno);
 }
 
 /* -- Operand fusion ------------------------------------------------------ */
@@ -1914,8 +1914,7 @@ void lj_asm_patchexit(jit_State *J, GCtrace *T, ExitNo exitno, MCode *target)
   MCode *px = exitstub_trace_addr(T, exitno);
   MCode *cstart = NULL;
   MCode *mcarea = lj_mcode_patch(J, p, 0);
-  MCode exitload = RISCVI_ADDI | RISCVF_D(RID_TMP) | RISCVF_S1(RID_ZERO) |
-                   RISCVF_IMMI(exitno);
+  MCode exitload = RISCVI_LUI | RISCVF_D(RID_TMP) | RISCVF_IMMU(exitno);
 
   for (; p < pe; p++) {
     if (*p == exitload) {  /* Look for load of exit number. */
diff --git a/src/vm_riscv64.dasc b/src/vm_riscv64.dasc
index 92259b57..3254fb21 100644
--- a/src/vm_riscv64.dasc
+++ b/src/vm_riscv64.dasc
@@ -2356,6 +2356,7 @@ static void build_subroutines(BuildCtx *ctx)
   |  ld L, GL->cur_L
   |  ld BASE, GL->jit_base
   |  srli ra, ra, 12
+  |  srli TMP1, TMP1, 12
   |  sd L, (offsetof(jit_State, L)-2047)(CARG2)
   |  sw ra, (offsetof(jit_State, parent)-2047)(CARG2)	// Store trace number.
   |  sd BASE, L->base
-- 
2.42.0

