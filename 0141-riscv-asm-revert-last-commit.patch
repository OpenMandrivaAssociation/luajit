From 21a983c8fb51e10aebd7584dc70a3dd6d0b4b723 Mon Sep 17 00:00:00 2001
From: gns <infiwang@pm.me>
Date: Mon, 3 Jul 2023 18:36:35 +0800
Subject: [PATCH 141/156] riscv(asm): revert last commit

This sets up a trampoline for sidetraces, which is simply a jump,
not jump and link. So it should be okay actually.
---
 src/lj_asm_riscv64.h | 27 ++++++++++++---------------
 1 file changed, 12 insertions(+), 15 deletions(-)

diff --git a/src/lj_asm_riscv64.h b/src/lj_asm_riscv64.h
index 3892cf75..863d3546 100644
--- a/src/lj_asm_riscv64.h
+++ b/src/lj_asm_riscv64.h
@@ -67,29 +67,26 @@ static void asm_sparejump_setup(ASMState *as)
 {
   MCode *mxp = as->mctop;
   if ((char *)mxp == (char *)as->J->mcarea + as->J->szmcarea) {
-    for (int i = RISCV_SPAREJUMP*3; i--; )
+    for (int i = RISCV_SPAREJUMP*2; i--; )
       *--mxp = RISCVI_EBREAK;
     as->mctop = mxp;
   }
 }
 
-static MCode *asm_sparejump_use(MCode *mcarea, MCode *target, MCode *ret)
+static MCode *asm_sparejump_use(MCode *mcarea, MCode *target)
 {
   MCode *mxp = (MCode *)((char *)mcarea + ((MCLink *)mcarea)->size);
   int slot = RISCV_SPAREJUMP;
-  RISCVIns tslot = RISCVI_EBREAK, tauipc, tjalr, rjal;
+  RISCVIns tslot = RISCVI_EBREAK, tauipc, tjalr;
   while (slot--) {
-    mxp -= 3;
-    ptrdiff_t jdelta = (char *)target - (char *)mxp,
-      rdelta = (char *)ret - (char *)(mxp+2);
-    tauipc = RISCVI_AUIPC | RISCVF_D(RID_TMP) | RISCVF_IMMU(RISCVF_HI(jdelta)),
-    tjalr = RISCVI_JALR | RISCVF_D(RID_RA) | RISCVF_S1(RID_TMP) |
-      RISCVF_IMMI(RISCVF_LO(jdelta)),
-    rjal = RISCVI_JAL | RISCVF_IMMJ(rdelta);
-    if (mxp[0] == tauipc && mxp[1] == tjalr && mxp[2] == rjal) {
+    mxp -= 2;
+    ptrdiff_t delta = (char *)target - (char *)mxp;
+    tauipc = RISCVI_AUIPC | RISCVF_D(RID_TMP) | RISCVF_IMMU(RISCVF_HI(delta)),
+    tjalr = RISCVI_JALR | RISCVF_S1(RID_TMP) | RISCVF_IMMI(RISCVF_LO(delta));
+    if (mxp[0] == tauipc && mxp[1] == tjalr) {
       return mxp;
     } else if (mxp[0] == tslot) {
-      mxp[0] = tauipc, mxp[1] = tjalr, mxp[2] = rjal;
+      mxp[0] = tauipc, mxp[1] = tjalr;
       return mxp;
     }
   }
@@ -1903,14 +1900,14 @@ void lj_asm_patchexit(jit_State *J, GCtrace *T, ExitNo exitno, MCode *target)
          ((p[1] & 0x0000007fu) == 0x6fu) && p[0] != RISCV_NOPATCH_GC_CHECK)) {
       lj_assertJ(checki32(ndelta), "branch target out of range");
       /* Patch jump, if within range. */
+	    patchbranch:
       if (checki21(ndelta)) { /* Patch jump */
-patchbranch:
   p[1] = RISCVI_JAL | RISCVF_IMMJ(ndelta);
   if (!cstart) cstart = p + 1;
       } else {  /* Branch out of range. Use spare jump slot in mcarea. */
-  MCode *mcjump = asm_sparejump_use(mcarea, target, p+2);
+  MCode *mcjump = asm_sparejump_use(mcarea, target);
   if (mcjump) {
-	  lj_mcode_sync(mcjump, mcjump+3);
+	  lj_mcode_sync(mcjump, mcjump+2);
     ndelta = (char *)mcjump - (char *)(p+1);
     if (checki21(ndelta)) {
       goto patchbranch;
-- 
2.42.0

