From 48a7c810fa80a4714ff2300d6ccd087799956990 Mon Sep 17 00:00:00 2001
From: Raymond Wong <infiwang@pm.me>
Date: Thu, 13 Oct 2022 21:51:20 +0800
Subject: [PATCH 004/156] lj: wip: refine rv64 interpreter(bcvm) and [rx]0

This is by no means finished, archive purpose only.
---
 src/vm_riscv64.dasc | 181 +++++++++++++++++++++++---------------------
 1 file changed, 96 insertions(+), 85 deletions(-)

diff --git a/src/vm_riscv64.dasc b/src/vm_riscv64.dasc
index 6375ea76..c438c99c 100644
--- a/src/vm_riscv64.dasc
+++ b/src/vm_riscv64.dasc
@@ -434,14 +434,14 @@
 |
 |
 |// Set current VM state. Uses TMP0.
-|.macro li_vmstate, st; addiw TMP0, r0, ~LJ_VMST_..st; .endmacro
-|.macro st_vmstate; .STXW TMP0, DISPATCH, DISPATCH_GL(vmstate); .endmacro
+|.macro li_vmstate, st; .liw TMP0, ~LJ_VMST_..st; .endmacro
+|.macro st_vmstate; .sxw TMP0, DISPATCH, DISPATCH_GL(vmstate); .endmacro
 |
 |// Move table write barrier back. Overwrites mark and tmp.
 |.macro barrierback, tab, mark, tmp, target
-|  .LDXD tmp, DISPATCH, DISPATCH_GL(gc.grayagain)
+|  .lxd tmp, DISPATCH, DISPATCH_GL(gc.grayagain)
 |  andi mark, mark, ~LJ_GC_BLACK & 255		// black2gray(tab)
-|  .STXD tab, DISPATCH, DISPATCH_GL(gc.grayagain)
+|  .sxd tab, DISPATCH, DISPATCH_GL(gc.grayagain)
 |  sb mark, tab->marked
 |  sd tmp, tab->gclist
 |  b target
@@ -609,7 +609,7 @@ static void build_subroutines(BuildCtx *ctx)
   |  mv CRET1, CARG2
   |->vm_unwind_c_eh:			// Landing pad for external unwinder.
   |  ld L, SAVE_L(sp)
-  |  addiw TMP0, r0, ~LJ_VMST_C
+  |. liw TMP0, ~LJ_VMST_C
   |  ld GL:TMP1, L->glref
   |  sw TMP0, GL:TMP1->vmstate
   |  j ->vm_leave_unw
@@ -682,15 +682,15 @@ static void build_subroutines(BuildCtx *ctx)
   |  li PC, FRAME_CP
   |  addi TMP0, sp, CFRAME_RESUME
   |    .addxi DISPATCH, DISPATCH, GG_G2DISP
-  |   sw r0, SAVE_NRES(sp)
-  |   sw r0, SAVE_ERRF(sp)
+  |   sw x0, SAVE_NRES(sp)
+  |   sw x0, SAVE_ERRF(sp)
   |   sd CARG1, SAVE_PC(sp)			// Any value outside of bytecode is ok.
-  |   sd r0, SAVE_CFRAME(sp)
+  |   sd x0, SAVE_CFRAME(sp)
   |   sd TMP0, L->cframe
   |    beqz TMP1, >3
   |
   |  // Resume after yield (like a return).
-  |  .STXD L, DISPATCH, DISPATCH_GL(cur_L)
+  |. sxd L, DISPATCH, DISPATCH_GL(cur_L)
   |  mv RA, BASE
   |   ld BASE, L->base
   |   ld TMP1, L->top
@@ -698,7 +698,7 @@ static void build_subroutines(BuildCtx *ctx)
   |     .lxi TMP3, 0x59c0		// TOBIT = 2^52 + 2^51 (float).
   |   sub RD, TMP1, BASE
   |     fmv.w.x TOBIT, TMP3
-  |    sb r0, L->status
+  |    sb x0, L->status
   |     fcvt.d.s TOBIT, TOBIT
   |    li_vmstate INTERP
   |   addi RD, RD, 8
@@ -735,7 +735,7 @@ static void build_subroutines(BuildCtx *ctx)
   |  sd sp, L->cframe			// Add our C frame to cframe chain.
   |
   |3:  // Entry point for vm_cpcall/vm_resume (BASE = base, PC = ftype).
-  |  .STXD L, DISPATCH, DISPATCH_GL(cur_L)
+  |. sxd L, DISPATCH, DISPATCH_GL(cur_L)
   |  ld TMP2, L->base			// TMP2 = old base (used in vmeta_call).
   |     .lxi TMP3, 0x59c0		// TOBIT = 2^52 + 2^51 (float).
   |   ld TMP1, L->top
@@ -771,10 +771,10 @@ static void build_subroutines(BuildCtx *ctx)
   |    ld TMP1, L->cframe
   |     .addxi DISPATCH, DISPATCH, GG_G2DISP
   |   sw TMP0, SAVE_NRES(sp)		// Neg. delta means cframe w/o frame.
-  |  sw r0, SAVE_ERRF(sp)		// No error function.
+  |  sw x0, SAVE_ERRF(sp)		// No error function.
   |    sd TMP1, SAVE_CFRAME(sp)
   |    sd sp, L->cframe			// Add our C frame to cframe chain.
-  |     .STXD L, DISPATCH, DISPATCH_GL(cur_L)
+  |.     sxd L, DISPATCH, DISPATCH_GL(cur_L)
   |  jalr CARG4			// (lua_State *L, lua_CFunction func, void *ud)
   |  mv BASE, CRET1
   |  li PC, FRAME_CP
@@ -1150,8 +1150,8 @@ static void build_subroutines(BuildCtx *ctx)
   |
   |// Inlined GC threshold check.
   |.macro ffgccheck
-  |  .LDXD TMP0, DISPATCH, DISPATCH_GL(gc.total)
-  |  .LDXD TMP1, DISPATCH, DISPATCH_GL(gc.threshold)
+  |.  lxd TMP0, DISPATCH, DISPATCH_GL(gc.total)
+  |.  lxd TMP1, DISPATCH, DISPATCH_GL(gc.threshold)
   |  bltu TMP0, TMP1, >1
   |  jal ->fff_gcstep
   |1:
@@ -1204,7 +1204,7 @@ static void build_subroutines(BuildCtx *ctx)
   |2:  // Field metatable must be at same offset for GCtab and GCudata!
   |  ld TAB:RB, TAB:CARG1->metatable
   |3:
-  |  .LDXD STR:RC, DISPATCH, DISPATCH_GL(gcroot[GCROOT_MMNAME+MM_metatable])
+  |.  lxd STR:RC, DISPATCH, DISPATCH_GL(gcroot[GCROOT_MMNAME+MM_metatable])
   |  li CARG1, LJ_TNIL
   |  beqz TAB:RB, ->fff_restv
   |  lw TMP0, TAB:RB->hmask
@@ -1239,7 +1239,7 @@ static void build_subroutines(BuildCtx *ctx)
   |8:
   |  slli TMP2, TMP2, 3
   |   sub TMP0, DISPATCH, TMP2
-  |  .LDXD TAB:RB, TMP0, DISPATCH_GL(gcroot[GCROOT_BASEMT])-8
+  |.  lxd TAB:RB, TMP0, DISPATCH_GL(gcroot[GCROOT_BASEMT])-8
   |  j <3
   |
   |.ffunc_2 setmetatable
@@ -1291,7 +1291,7 @@ static void build_subroutines(BuildCtx *ctx)
   |  // A __tostring method in the string base metatable is ignored.
   |  beqz TMP1, ->fff_restv	// String key?
   |  // Handle numbers inline, unless a number base metatable is present.
-  |  .LDXD TMP1, DISPATCH, DISPATCH_GL(gcroot[GCROOT_BASEMT_NUM])
+  |.  lxd TMP1, DISPATCH, DISPATCH_GL(gcroot[GCROOT_BASEMT_NUM])
   |  sltu TMP0, TISNUM, TMP0
   |  sd BASE, L->base			// Add frame since C call can throw.
   |  or TMP0, TMP0, TMP1
@@ -1404,7 +1404,7 @@ static void build_subroutines(BuildCtx *ctx)
   |
   |.ffunc pcall
   |  addi NARGS8:RC, NARGS8:RC, -8
-  |  .LDXBU TMP3, DISPATCH, DISPATCH_GL(hookmask)
+  |.  lxbu TMP3, DISPATCH, DISPATCH_GL(hookmask)
   |   mv TMP2, BASE
   |  bltz NARGS8:RC, ->fff_fallback
   |   addi BASE, BASE, 16
@@ -1426,7 +1426,7 @@ static void build_subroutines(BuildCtx *ctx)
   |  addi NARGS8:TMP0, NARGS8:RC, -16
   |  ld CARG1, 0(BASE)
   |   ld CARG2, 8(BASE)
-  |    .LDXBU TMP1, DISPATCH, DISPATCH_GL(hookmask)
+  |.    lxbu TMP1, DISPATCH, DISPATCH_GL(hookmask)
   |    bltz NARGS8:TMP0, ->fff_fallback
   |  gettp TMP2, CARG2
   |  addi TMP2, TMP2, -LJ_TFUNC
@@ -1507,7 +1507,7 @@ static void build_subroutines(BuildCtx *ctx)
   |  ld TMP3, L:RA->top
   |    li_vmstate INTERP
   |  ld BASE, L->base
-  |    .STXD L, DISPATCH, DISPATCH_GL(cur_L)
+  |.    sxd L, DISPATCH, DISPATCH_GL(cur_L)
   |    st_vmstate
   |  sub RD, TMP3, TMP2
   |   beqz TMP1, >8
@@ -1705,7 +1705,7 @@ static void build_subroutines(BuildCtx *ctx)
   |   ld PC, FRAME_PC(BASE)
   |  .addxi CARG1, DISPATCH, DISPATCH_GL(tmptv)
   |  jal extern frexp
-  |   .LDXW TMP1, DISPATCH, DISPATCH_GL(tmptv)
+  |.   lxw TMP1, DISPATCH, DISPATCH_GL(tmptv)
   |   fcvt.w.x FARG2, TMP1
   |  fsd FRET1, -16(BASE)
   |   fcvt.d.s FARG2, FARG2
@@ -1784,7 +1784,7 @@ static void build_subroutines(BuildCtx *ctx)
   |  bnez TMP1, ->fff_fallback		// Need exactly 1 string argument.
   |  lw TMP0, STR:CARG1->len
   |    ld PC, FRAME_PC(BASE)
-  |  sltu RD, r0, TMP0
+  |  snez RD, TMP0
   |   lbu TMP2, STR:CARG1[1]		// Access is always ok (NUL at end).
   |  addiw RD, RD, 1
   |  slliw RD, RD, 3			// RD = ((str->len != 0)+1)*8
@@ -1851,8 +1851,8 @@ static void build_subroutines(BuildCtx *ctx)
   |  mv CARG3, TMP2		// if (start < 0) start += len+1
   |3:
   |  li TMP3, 1
-  |  slt TMP2, CARG4, r0
-  |   slt TMP1, r0, CARG3
+  |  sltz TMP2, CARG4
+  |   sgtz TMP1, CARG3
   |  beqz TMP2, >4
   |  mv CARG4, x0			// if (end < 0) end = 0
   |4:
@@ -2019,7 +2019,7 @@ static void build_subroutines(BuildCtx *ctx)
   |// Reconstruct previous base for vmeta_call during tailcall.
   |->vm_call_tail:
   |  andi TMP0, PC, FRAME_TYPE
-  |  addi TMP2, r0, ~FRAME_TYPEP	// TODO
+  |  li TMP2, ~FRAME_TYPEP	// TODO
   |   and TMP1, PC, TMP2
   |  bnez TMP0, >3
   |  lbu TMP1, OFS_RA(PC)
@@ -2061,7 +2061,7 @@ static void build_subroutines(BuildCtx *ctx)
   |->vm_record:				// Dispatch target for recording phase.
   |
   |->vm_rethook:			// Dispatch target for return hooks.
-  |  .LDXBU TMP3, DISPATCH, DISPATCH_GL(hookmask)
+  |.  lxbu TMP3, DISPATCH, DISPATCH_GL(hookmask)
   |  andi TMP1, TMP3, HOOK_ACTIVE		// Hook already active?
   |  beqz TMP1, >1
   |5:  // Re-dispatch to static ins.
@@ -2212,7 +2212,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |   bne CARG4, TISNUM, >5
     |  sext.w CARG1, CARG1
     |  sext.w CARG2, CARG2
-    |  lui TMP3, r0, -0x20		// -BCBIAS_J*4
+    |  lui TMP3, (-(BCBIAS_J*4 >> 12)) & 0xfffff		// -BCBIAS_J*4
     |  slt TMP1, CARG1, CARG2
     |  addw TMP2, TMP2, TMP3		// TMP2=(jump-0x8000)<<2
     if (op == BC_ISLT || op == BC_ISGT) {
@@ -2232,7 +2232,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |
     |2:  // RA is not an integer.
     |  sltiu TMP1, CARG3, LJ_TISNUM
-    |  lui TMP3, -0x20		// -BCBIAS_J*4
+    |  lui TMP3, (-(BCBIAS_J*4 >> 12)) & 0xfffff		// -BCBIAS_J*4
     |  beqz TMP1, ->vmeta_comp
     |  sltiu TMP1, CARG4, LJ_TISNUM
     |  decode_BC4b TMP2
@@ -2277,7 +2277,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |
     |5:  // RA is an integer, RD is not an integer
     |  sltiu TMP1, CARG4, LJ_TISNUM
-    |  lui TMP3, r0, -0x20		// -BCBIAS_J*4
+    |  lui TMP3, (-(BCBIAS_J*4 >> 12)) & 0xfffff		// -BCBIAS_J*4
     |  beqz TMP1, ->vmeta_comp
     |  // RA is an integer, RD is a number. Convert RA to a number.
     if (op == BC_ISLT || op == BC_ISGE) {
@@ -2306,14 +2306,14 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |  sltu TMP0, TISNUM, CARG3
     |   sltu TMP1, TISNUM, CARG4
     |  or TMP0, TMP0, TMP1
-    |  lui TMP3, -0x20		// -BCBIAS_J*4
+    |  lui TMP3, (-(BCBIAS_J*4 >> 12)) & 0xfffff		// -BCBIAS_J*4
     if (vk) {
       |  beqz TMP0, ->BC_ISEQN_Z
     } else {
       |  beqz TMP0, ->BC_ISNEN_Z
     }
     |// Either or both types are not numbers.
-    |  lui TMP3, r0, -0x20		// -BCBIAS_J*4
+    |  lui TMP3, (-(BCBIAS_J*4 >> 12)) & 0xfffff		// -BCBIAS_J*4
     |  decode_BC4b TMP2
     |  addw TMP2, TMP2, TMP3		// (jump-0x8000)<<2
     |  bne CARG1, CARG2, >2
@@ -2369,7 +2369,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |. liw TMP0, LJ_TSTR
     |   decode_BC4b TMP2
     |   settp CARG2, TMP0
-    |   lui TMP3, -0x20		// -BCBIAS_J*4
+    |   lui TMP3, (-(BCBIAS_J*4 >> 12)) & 0xfffff		// -BCBIAS_J*4
     |  xor TMP0, CARG1, CARG2		// TMP2=0: A==D; TMP2!=0: A!=D
     |   addw TMP2, TMP2, TMP3
     if (vk) {
@@ -2398,7 +2398,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |  gettp CARG3, CARG1
     |   gettp CARG4, CARG2
     |    addi PC, PC, 4
-    |    lui TMP3, r0, -0x20		// -BCBIAS_J*4
+    |    lui TMP3, (-(BCBIAS_J*4 >> 12)) & 0xfffff		// -BCBIAS_J*4
     if (vk) {
       |->BC_ISEQN_Z:
     } else {
@@ -2465,7 +2465,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |    addi PC, PC, 4
     |   xor TMP0, TMP1, TMP0		// TMP0=0 A=D; TMP0!=0 A!=D
     |  decode_BC4b TMP2
-    |  lui TMP3, -0x20		// -BCBIAS_J*4
+    |  lui TMP3, (-(BCBIAS_J*4 >> 12)) & 0xfffff		// -BCBIAS_J*4
     |  addw TMP2, TMP2, TMP3		// TMP2=(jump-0x8000)<<2
     if (vk) {
       // |  masknez TMP2, TMP2, TMP0
@@ -2494,7 +2494,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |  add RA, BASE, RA
     |  sltiu TMP0, TMP0, LJ_TISTRUECOND		// TMP0=1 true; TMP0=0 false
     |  decode_BC4b TMP2
-    |  lui TMP3, -0x20		// -BCBIAS_J*4
+    |  lui TMP3, (-(BCBIAS_J*4 >> 12)) & 0xfffff		// -BCBIAS_J*4
     |  ld CRET1, 0(RD)
     |  addw TMP2, TMP2, TMP3		// (jump-0x8000)<<2
     if (op == BC_IST || op == BC_ISTC) {
@@ -3248,7 +3248,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |  lw TMP0, TAB:RB->hmask
     |   lw TMP1, STR:RC->sid
     |    ld NODE:TMP2, TAB:RB->node
-    |   sb r0, TAB:RB->nomm		// Clear metamethod cache.
+    |   sb zero, TAB:RB->nomm		// Clear metamethod cache.
     |  and TMP1, TMP1, TMP0		// idx = str->sid & tab->hmask
     |  slliw TMP0, TMP1, 5
     |  slliw TMP1, TMP1, 3
@@ -3539,7 +3539,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |  beq CARG1, TISNIL, <1		// Skip holes in array part.
     |   sd TMP2, 0(RA)
     |  sd CARG1, 8(RA)
-    |     lui TMP3, -0x20		// -BCBIAS_J*4
+    |     lui TMP3, (-(BCBIAS_J*4 >> 12)) & 0xfffff		// -BCBIAS_J*4
     |     decode_BC4b RD
     |     add RD, RD, TMP3
     |   sw RC, -8(RA)		// Update control var.
@@ -3563,7 +3563,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |   addiw RC, RC, 1
     |  beq CARG1, TISNIL, <6		// Skip holes in hash part.
     |  ld CARG2, NODE:TMP3->key
-    |     lui TMP3, -0x20		// -BCBIAS_J*4
+    |     lui TMP3, (-(BCBIAS_J*4 >> 12)) & 0xfffff		// -BCBIAS_J*4
     |  sd CARG1, 8(RA)
     |    addw RC, RC, TMP0
     |     decode_BC4b RD
@@ -3582,7 +3582,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |    add TMP0, PC, TMP0
     |   ld CARG2, -16(RA)
     |   ld CARG3, -8(RA)
-    |    lui TMP2, -0x20		// -BCBIAS_J*4
+    |    lui TMP2, (-(BCBIAS_J*4 >> 12)) & 0xfffff		// -BCBIAS_J*4
     |  checkfunc CFUNC:CARG1, >5
     |  gettp CARG2, CARG2
     |  addi CARG2, CARG2, -LJ_TTAB
@@ -3591,7 +3591,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |  or TMP3, CARG2, CARG3
     |  addi TMP1, TMP1, -FF_next_N
     |  or TMP3, TMP3, TMP1
-    |   lui TMP1, (LJ_KEYINDEX >> 12)
+    |   lui TMP1, (LJ_KEYINDEX >> 12) & 0xfffff
     |  bnez TMP3, >5
     |  add PC, TMP0, TMP2
     |  ori TMP1, TMP1, (LJ_KEYINDEX & 0xfff)
@@ -3804,7 +3804,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |    gettp CARG6, CARG3
     if (op != BC_JFORL) {
       |  srliw RD, RD, 1
-      |  lui TMP2, -0x20	// -BCBIAS_J<<2
+      |  lui TMP2, (-(BCBIAS_J*4 >> 12)) & 0xfffff	// -BCBIAS_J<<2
       |  add TMP2, RD, TMP2
     }
     |  bne CARG4, TISNUM, >3
@@ -3869,8 +3869,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |  fld FTMP0, FORL_IDX*8(RA)	// start
     |  fld FTMP1, FORL_STOP*8(RA)	// stop
     |  ld TMP0, FORL_STEP*8(RA)	// step
-    |  sltz TMP0, TMP0		// step < 0 ?
-    |  fmv.d.x FTMP2, TMP0
+    |  sltz CARG2, TMP0		// step < 0 ?
     if (!vk) {
       |  sltiu TMP3, CARG4, LJ_TISNUM	// start is number ?
       |  sltiu TMP0, CARG5, LJ_TISNUM	// step is number ?
@@ -3880,9 +3879,11 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
       |  beqz TMP0, ->vmeta_for		// if start or step or stop isn't number
       |  flt.d TMP3, FTMP0, FTMP1		// start < stop ?
       |  flt.d TMP4, FTMP1, FTMP0		// stop < start ?
-      |  movfr2cf FCC0, FTMP2
-      |  fsel FTMP2, FTMP4, FTMP3, FCC0
-      |  fmv.x.d CARG2, FTMP2	// CARG2=0:+,start<stop or -,start>stop
+      |  neg TMP3, TMP3
+      |  neg TMP4, TMP4
+      |  and TMP3, TMP3, CARG2
+      |  and TMP4, TMP4, CARG2
+      |  or CARG2, TMP3, TMP4	// CARG2=0:+,start<stop or -,start>stop
       |  j <1
     } else {
       |  fld FTMP3, FORL_STEP*8(RA)
@@ -3891,14 +3892,14 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
       |  flt.d TMP4, FTMP1, FTMP0
       |  neg TMP3, TMP3
       |  neg TMP4, TMP4
-      |  movfr2cf FCC0, FTMP2
-      |  fsel FTMP2, FTMP4, FTMP3, FCC0
-      |  fmv.x.d CARG2, FTMP2
+      |  and TMP3, TMP3, CARG2
+      |  and TMP4, TMP4, CARG2
+      |  or CARG2, TMP3, TMP4
       if (op == BC_IFORL) {
 	// |  masknez TMP2, TMP2, CARG2
-  |  snez TMP4, CARG2
-  |  neg TMP4, TMP4
-  |  and TMP2, TMP2, TMP4
+  |  seqz TMP3, CARG2
+  |  neg TMP3, TMP3
+  |  and TMP2, TMP2, TMP3
 	|  add PC, PC, TMP2
       }
       |  fsd FTMP0, FORL_IDX*8(RA)
@@ -3922,7 +3923,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |  ld TMP1, 0(RA)
     |  beq TMP1, TISNIL, >1		// Stop if iterator returned nil.
     if (op == BC_JITERL) {
-      |  sd TMP1,-8(RA)
+      |   sd TMP1,-8(RA)
       |  b =>BC_JLOOP
     } else {
       |  branch_RD			// Otherwise save control var + branch.
@@ -3967,10 +3968,10 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
   case BC_IFUNCF:
     |  // BASE = new base, RA = BASE+framesize*8, RB = LFUNC, RC = nargs*8
     |  ld TMP2, L->maxstack
-    |  lbu TMP1, -4+PC2PROTO(numparams)(PC)
-    |  ld KBASE, -4+PC2PROTO(k)(PC)
+    |   lbu TMP1, -4+PC2PROTO(numparams)(PC)
+    |    ld KBASE, -4+PC2PROTO(k)(PC)
     |  sltu TMP0, TMP2, RA
-    |  slliw TMP1, TMP1, 3			// numparams*8
+    |   slliw TMP1, TMP1, 3			// numparams*8
     |  bnez TMP0, ->vm_growstack_l
     |2:
     |  sltu TMP0, NARGS8:RC, TMP1		// Check for missing parameters.
@@ -3985,7 +3986,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |3:  // Clear missing parameters.
     |  add TMP0, BASE, NARGS8:RC
     |  sd TISNIL, 0(TMP0)
-    |  addiw NARGS8:RC, NARGS8:RC, 8
+    |   addiw NARGS8:RC, NARGS8:RC, 8
     |  j <2
     break;
 
@@ -3998,33 +3999,38 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
 
   case BC_IFUNCV:
     |  // BASE = new base, RA = BASE+framesize*8, RB = LFUNC, RC = nargs*8
-    |  .liw TMP0, LJ_TFUNC
-    |  add TMP1, BASE, RC
+    |.  liw TMP0, LJ_TFUNC
+    |   add TMP1, BASE, RC
     |  ld TMP2, L->maxstack
-    |  settp LFUNC:RB, TMP0
+    |   settp LFUNC:RB, TMP0
     |  add TMP0, RA, RC
-    |  sd LFUNC:RB, 0(TMP1)		// Store (tagged) copy of LFUNC.
-    |  addi TMP3, RC, 16+FRAME_VARG
+    |   sd LFUNC:RB, 0(TMP1)		// Store (tagged) copy of LFUNC.
+    |   addi TMP3, RC, 16+FRAME_VARG
     |  sltu TMP0, TMP0, TMP2
-    |  ld KBASE, -4+PC2PROTO(k)(PC)
-    |  sd TMP3, 8(TMP1)                // Store delta + FRAME_VARG.
+    |    ld KBASE, -4+PC2PROTO(k)(PC)
+    |   sd TMP3, 8(TMP1)                // Store delta + FRAME_VARG.
     |  beqz TMP0, ->vm_growstack_l
     |  lbu TMP2, -4+PC2PROTO(numparams)(PC)
-    |  mv RA, BASE
-    |  mv RC, TMP1
+    |   mv RA, BASE
+    |   mv RC, TMP1
     |  ins_next1
-    |  addi BASE, TMP1, 16
+    |   addi BASE, TMP1, 16
     |  beqz TMP2, >2
     |1:
     |  ld TMP0, 0(RA)
     |  sltu CARG2, RA, RC			// Less args than parameters?
     |  mv CARG1, TMP0
-    |  addi RA, RA, 8
-    |  addi TMP1, TMP1, 8
-    |  addiw TMP2, TMP2, -1
+    |    addi RA, RA, 8
+    |    addi TMP1, TMP1, 8
+    |    addiw TMP2, TMP2, -1
     |  beqz CARG2, >3
-    |  masknez TMP3, CARG1, CARG2		// Clear old fixarg slot (help the GC).
-    |  maskeqz CARG1, TISNIL, CARG2
+    // |  masknez TMP3, CARG1, CARG2		// Clear old fixarg slot (help the GC).
+    // |  maskeqz CARG1, TISNIL, CARG2
+    |  seqz TMP4, CARG2
+    |  neg TMP4, TMP4
+    |  and TMP3, TMP4, CARG1
+    |  not TMP4, TMP4
+    |  and CARG1, TMP4, TISNIL
     |  or CARG1, CARG1, TMP3
     |  sd CARG1, -8(RA)
     |  sd TMP0, 8(TMP1)
@@ -4032,8 +4038,13 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |2:
     |  ins_next2
     |3:
-    |  maskeqz TMP0, TMP0, CARG2		// Clear missing fixargs.
-    |  masknez TMP3, TISNIL, CARG2
+    // |  maskeqz TMP0, TMP0, CARG2		// Clear missing fixargs.
+    // |  masknez TMP3, TISNIL, CARG2
+    |  snez TMP4, CARG2
+    |  neg TMP4, TMP4
+    |  and TMP0, TMP0, TMP4
+    |  not TMP4, TMP4
+    |  and TMP3, TMP4, TISNIL
     |  or TMP0, TMP0, TMP3
     |  sd TMP0, 8(TMP1)
     |  bnez TMP2, <1
@@ -4046,31 +4057,31 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     if (op == BC_FUNCC) {
       |  ld CARG4, CFUNC:RB->f
     } else {
-      |  .LDXD CARG4, DISPATCH, DISPATCH_GL(wrapf)
+      |. lxd CARG4, DISPATCH, DISPATCH_GL(wrapf)
     }
     |  add TMP1, RA, NARGS8:RC
     |  ld TMP2, L->maxstack
-    |  add RC, BASE, NARGS8:RC
+    |   add RC, BASE, NARGS8:RC
     |  sd BASE, L->base		// base of currently excuting function
-    |  sd RC, L->top
+    |   sd RC, L->top
     |  sltu TMP3, TMP2, TMP1
-    |  li_vmstate C			// addiw TMP0, r0, ~LJ_VMST_C
+    |    li_vmstate C			// li TMP0, ~LJ_VMST_C
     if (op == BC_FUNCCW) {
       |  ld CARG2, CFUNC:RB->f
     }
-    |  mv CARG1, L
+    |   mv CARG1, L
     |  bnez TMP3, ->vm_growstack_c	// Need to grow stack.
-    |  st_vmstate			// .STXW TMP0, DISPATCH, DISPATCH_GL(vmstate)
+    |    st_vmstate			// .sxw TMP0, DISPATCH, DISPATCH_GL(vmstate)
     |  jalr CARG4		// (lua_State *L [, lua_CFunction f])
     |  // Returns nresults.
     |  ld BASE, L->base
     |  ld TMP1, L->top
-    |  .STXD L, DISPATCH, DISPATCH_GL(cur_L)
-    |  slliw RD, CRET1, 3
-    |  li_vmstate INTERP
+    |. sxd L, DISPATCH, DISPATCH_GL(cur_L)
+    |   slliw RD, CRET1, 3
+    |    li_vmstate INTERP
     |  ld PC, FRAME_PC(BASE)		// Fetch PC of caller.
     |  sub RA, TMP1, RD		// RA = L->top - nresults*8
-    |  st_vmstate
+    |    st_vmstate
     |  j ->vm_returnc
     break;
 
-- 
2.42.0

