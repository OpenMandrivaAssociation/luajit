From 05e9f1601697494870f2461de2e5a3ad63671993 Mon Sep 17 00:00:00 2001
From: Raymond Wong <infiwang@pm.me>
Date: Thu, 13 Oct 2022 22:47:50 +0800
Subject: [PATCH 005/156] lj: wip: refine rv64 interpreter bc decode and
 register layout

This is by no means finished, archive purpose only.
---
 src/vm_riscv64.dasc | 128 +++++++++++++++++++++-----------------------
 1 file changed, 60 insertions(+), 68 deletions(-)

diff --git a/src/vm_riscv64.dasc b/src/vm_riscv64.dasc
index c438c99c..d64692d9 100644
--- a/src/vm_riscv64.dasc
+++ b/src/vm_riscv64.dasc
@@ -44,11 +44,11 @@
 |.define RD,		x16
 |.define INS,		x17
 |
-|.define TMP0,		x12
-|.define TMP1,		x13
-|.define TMP2,		x14
-|.define TMP3,		x15
-|.define TMP4,		x16
+|.define TMP0,		x6
+|.define TMP1,		x7
+|.define TMP2,		x25
+|.define TMP3,		x26
+|.define TMP4,		x27
 |
 |// RISC-V lp64d calling convention.
 // |.define CFUNCADDR,	x5
@@ -76,11 +76,11 @@
 |.define FRET1,		f10
 |.define FRET2,		f11
 |
-|.define FTMP0,		f27
-|.define FTMP1,		f28
-|.define FTMP2,		f29
-|.define FTMP3,		f30
-|.define FTMP4,		f31
+|.define FTMP0,		f0
+|.define FTMP1,		f1
+|.define FTMP2,		f2
+|.define FTMP3,		f3
+|.define FTMP4,		f4
 |
 |// Stack layout while in interpreter. Must match with lj_frame.h.
 |// RISC-V 64 lp64d.
@@ -325,28 +325,30 @@
 |.define OFS_OP,	0
 |
 |// Instruction decode.
-// |.macro decode_BC4b, dst; slliw dst, dst, 2; .endmacro
-// |.macro decode_BC8b, dst; slliw dst, dst, 3; .endmacro
-// |.macro decode_OP, dst, ins; andi dst, ins, 0xff; .endmacro
-// |.macro decode_RA, dst, ins; bstrpick.d dst, ins, 15, 8; decode_BC8b dst; .endmacro
-// |.macro decode_RB, dst, ins; bstrpick.d dst, ins, 31, 24; decode_BC8b dst; .endmacro
-// |.macro decode_RC, dst, ins; bstrpick.d dst, ins, 23, 16; decode_BC8b dst; .endmacro
-// |.macro decode_RD, dst, ins; bstrpick.d dst, ins, 31, 16; decode_BC8b dst; .endmacro
-// |.macro decode_RDtoRC8, dst, src; andi dst, src, 0x7f8; .endmacro
 |.macro decode_OP1, dst, ins; andi dst, ins, 0xff; .endmacro
-|.macro decode_OP8a, dst, ins; andi dst, ins, 0xff; .endmacro
-|.macro decode_OP8b, dst; sll dst, dst, 3; .endmacro
-|.macro decode_RC8a, dst, ins; srl dst, ins, 13; .endmacro
-|.macro decode_RC8b, dst; andi dst, dst, 0x7f8; .endmacro
-|.macro decode_RD4b, dst; slli dst, dst, 2; .endmacro
-|.macro decode_RA8a, dst, ins; srli dst, ins, 5; .endmacro
-|.macro decode_RA8b, dst; andi dst, dst, 0x7f8; .endmacro
-|.macro decode_RB8a, dst, ins; srli dst, ins, 21; .endmacro
-|.macro decode_RB8b, dst; andi dst, dst, 0x7f8; .endmacro
-|.macro decode_RD8a, dst, ins; srli dst, ins, 16; .endmacro
-|.macro decode_RD8b, dst; slli dst, dst, 3; .endmacro
+|.macro decode_BC4b, dst; slliw dst, dst, 2; .endmacro
+|.macro decode_BC8b, dst; slliw dst, dst, 3; .endmacro
+|.macro decode_RX8b, dst; andi dst, dst, 0x7f8; .endmacro
+|
+|.macro decode_OP8a, dst, ins; decode_OP1 dst, ins; .endmacro
+|.macro decode_OP8b, dst; decode_RX8b dst; .endmacro
+|.macro decode_RA8a, dst, ins; srliw dst, ins, 5; .endmacro
+|.macro decode_RA8b, dst; decode_RX8b dst; .endmacro
+|.macro decode_RB8a, dst, ins; srliw dst, ins, 21; .endmacro
+|.macro decode_RB8b, dst; decode_RX8b dst; .endmacro
+|.macro decode_RC8a, dst, ins; srliw dst, ins, 13; .endmacro
+|.macro decode_RC8b, dst; decode_RX8b dst; .endmacro
+|.macro decode_RD8a, dst, ins; srliw dst, ins, 16; .endmacro
+|.macro decode_RD4b, dst; BC4b dst; .endmacro
+|.macro decode_RD8b, dst; BC8b dst; .endmacro
 |.macro decode_RDtoRC8, dst, src; andi dst, src, 0x7f8; .endmacro
 |
+|.macro decode_OP8, dst, ins; decode_OP1 dst, ins; decode_BC8b dst; .endmacro
+|.macro decode_RA8, dst, ins; decode_RA8a dst, ins; decode_RA8b dst; .endmacro
+|.macro decode_RB8, dst, ins; decode_RB8a dst, ins; decode_RB8b dst; .endmacro
+|.macro decode_RC8, dst, ins; decode_RC8a dst, ins; decode_RC8b dst; .endmacro
+|.macro decode_RD8, dst, ins; decode_RD8a dst, ins; decode_RD8b dst; .endmacro
+|
 |// Instruction fetch.
 |.macro ins_NEXT1
 |  lw INS, 0(PC)
@@ -354,8 +356,7 @@
 |.endmacro
 |// Instruction decode+dispatch.
 |.macro ins_NEXT2
-|  decode_OP8a TMP1, INS
-|  decode_OP8b TMP1
+|  decode_OP8 TMP1, INS
 |  add TMP0, DISPATCH, TMP1
 |   decode_RD8a RD, INS
 |  ld TMP4, 0(TMP0)
@@ -399,10 +400,8 @@
 |  ld PC, LFUNC:RB->pc
 |  lw INS, 0(PC)
 |   addi PC, PC, 4
-|  decode_OP8a TMP1, INS
-|   decode_RA8a RA, INS
-|  decode_OP8b TMP1
-|   decode_RA8b RA
+|  decode_OP8 TMP1, INS
+|   decode_RA8 RA, INS
 |  add TMP0, DISPATCH, TMP1
 |  ld TMP0, 0(TMP0)
 |   add RA, RA, BASE
@@ -807,10 +806,8 @@ static void build_subroutines(BuildCtx *ctx)
   |  lw INS, -4(PC)
   |   addi CARG2, RB, -32
   |  ld TMP0, 0(RA)
-  |  decode_RB8a MULTRES, INS
-  |   decode_RA8a RA, INS
-  |  decode_RB8b MULTRES
-  |   decode_RA8b RA
+  |  decode_RB8 MULTRES, INS
+  |   decode_RA8 RA, INS
   |  add TMP1, BASE, MULTRES
   |   sd BASE, L->base
   |   sub CARG3, CARG2, TMP1
@@ -945,7 +942,7 @@ static void build_subroutines(BuildCtx *ctx)
   |  addi PC, PC, -4
   |  sd BASE, L->base
   |  mv CARG1, L
-  |  decode_OP CARG4, INS
+  |  decode_OP1 CARG4, INS
   |  sd PC, SAVE_PC(sp)
   |  jal extern lj_meta_comp	// (lua_State *L, TValue *o1, *o2, int op)
   |  // Returns 0/1 or TValue * (metamethod).
@@ -1096,10 +1093,8 @@ static void build_subroutines(BuildCtx *ctx)
   |   sd PC, SAVE_PC(sp)
   |  mv MULTRES, INS
   |  jal extern lj_meta_for	// (lua_State *L, TValue *base)
-  |  decode_RA8a RA, MULTRES
-  |   decode_RD8a RD, MULTRES
-  |  decode_RA8b RA
-  |   decode_RD8b RD
+  |  decode_RA8 RA, MULTRES
+  |   decode_RD8 RD, MULTRES
   |  b =>BC_FORI
   |
   |//-----------------------------------------------------------------------
@@ -1632,8 +1627,7 @@ static void build_subroutines(BuildCtx *ctx)
   |  addi RA, BASE, -16
   |  bnez TMP0, ->vm_return
   |  lw INS, -4(PC)
-  |  decode_RB8a RB, INS
-  |  decode_RB8b RB
+  |  decode_RB8 RB, INS
   |5:
   |  sltu TMP2, RD, RB
   |  decode_RA8a TMP0, INS
@@ -2091,14 +2085,12 @@ static void build_subroutines(BuildCtx *ctx)
   |  ld BASE, L->base
   |4:  // Re-dispatch to static ins.
   |  lw INS, -4(PC)
-  |  decode_OP8a TMP1, INS
-  |  decode_OP8b TMP1
+  |  decode_OP8 TMP1, INS
   |  add TMP0, DISPATCH, TMP1
   |   decode_RD8a RD, INS
   |  ld TMP1, GG_DISP2STATIC(TMP0)
-  |   decode_RA8a RA, INS
+  |   decode_RA8 RA, INS
   |   decode_RD8b RD
-  |   decode_RA8b RA
   |  jr TMP1
   |
   |->cont_hook:				// Continue from hook yield.
@@ -2628,11 +2620,11 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |  // RA = dst*8, RB = src1*8, RC = src2*8 | num_const*8
     ||if (vk == 1) {
     |   // RA = dst*8, RB = num_const*8, RC = src1*8
-    |   decode_RB RC, INS
+    |   decode_RB8 RC, INS
     |   decode_RDtoRC8 RB, RD
     ||} else {
     |   // RA = dst*8, RB = src1*8, RC = num_const*8
-    |   decode_RB RB, INS
+    |   decode_RB8 RB, INS
     |   decode_RDtoRC8 RC, RD
     ||}
     ||switch (vk) {
@@ -2770,7 +2762,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
 
   case BC_CAT:
     |  // RA = dst*8, RB = src_start*8, RC = src_end*8
-    |  decode_RB RB, INS
+    |  decode_RB8 RB, INS
     |   decode_RDtoRC8 RC, RD
     |  sub CARG3, RC, RB
     |   sd BASE, L->base
@@ -3052,7 +3044,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
 
   case BC_TGETV:
     |  // RA = dst*8, RB = table*8, RC = key*8
-    |  decode_RB RB, INS
+    |  decode_RB8 RB, INS
     |   decode_RDtoRC8 RC, RD
     |  add CARG2, BASE, RB
     |   add CARG3, BASE, RC
@@ -3091,7 +3083,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     break;
   case BC_TGETS:
     |  // RA = dst*8, RB = table*8, RC = str_const*8 (~)
-    |  decode_RB RB, INS
+    |  decode_RB8 RB, INS
     |   decode_RDtoRC8 RC, RD
     |  add CARG2, BASE, RB
     |   sub CARG3, KBASE, RC
@@ -3137,7 +3129,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     break;
   case BC_TGETB:
     |  // RA = dst*8, RB = table*8, RC = index*8
-    |  decode_RB RB, INS
+    |  decode_RB8 RB, INS
     |  add CARG2, BASE, RB
     |   decode_RDtoRC8 RC, RD
     |  ld TAB:RB, 0(CARG2)
@@ -3165,7 +3157,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     break;
   case BC_TGETR:
     |  // RA = dst*8, RB = table*8, RC = key*8
-    |  decode_RB RB, INS
+    |  decode_RB8 RB, INS
     |   decode_RDtoRC8 RC, RD
     |  add RB, BASE, RB
     |   add RC, BASE, RC
@@ -3188,7 +3180,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
 
   case BC_TSETV:
     |  // RA = src*8, RB = table*8, RC = key*8
-    |  decode_RB RB, INS
+    |  decode_RB8 RB, INS
     |   decode_RDtoRC8 RC, RD
     |  add CARG2, BASE, RB
     |   add CARG3, BASE, RC
@@ -3234,7 +3226,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     break;
   case BC_TSETS:
     |  // RA = src*8, RB = table*8, RC = str_const*8 (~)
-    |  decode_RB RB, INS
+    |  decode_RB8 RB, INS
     |   decode_RDtoRC8 RC, RD
     |  add CARG2, BASE, RB
     |   sub CARG3, KBASE, RC
@@ -3308,7 +3300,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     break;
   case BC_TSETB:
     |  // RA = src*8, RB = table*8, RC = index*8
-    |  decode_RB RB, INS
+    |  decode_RB8 RB, INS
     |   decode_RDtoRC8 RC, RD
     |  add CARG2, BASE, RB
     |   add RA, BASE, RA
@@ -3344,7 +3336,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     break;
   case BC_TSETR:
     |  // RA = dst*8, RB = table*8, RC = key*8
-    |  decode_RB RB, INS
+    |  decode_RB8 RB, INS
     |   decode_RDtoRC8 RC, RD
     |  add CARG1, BASE, RB
     |   add CARG3, BASE, RC
@@ -3482,7 +3474,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |
     |5:  // Tailcall to a fast function with a Lua frame below.
     |  lw INS, -4(TMP1)
-    |  decode_RA RA, INS
+    |  decode_RA8 RA, INS
     |  sub TMP1, BASE, RA
     |  ld TMP1, -32(TMP1)
     |  cleartp LFUNC:TMP1
@@ -3612,7 +3604,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |  // RA = base*8, RB = (nresults+1)*8, RC = numparams*8
     |  ld TMP0, FRAME_PC(BASE)
     |  decode_RDtoRC8 RC, RD
-    |   decode_RB RB, INS
+    |   decode_RB8 RB, INS
     |  add RC, BASE, RC
     |   add RA, BASE, RA
     |  addi RC, RC, FRAME_VARG
@@ -3703,8 +3695,8 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |   lw INS, -4(PC)
     |    addi TMP2, BASE, -16
     |    addi RC, RD, -8
-    |  decode_RA TMP0, INS
-    |   decode_RB RB, INS
+    |  decode_RA8 TMP0, INS
+    |   decode_RB8 RB, INS
     |   sub BASE, TMP2, TMP0
     |   add TMP3, TMP2, RB
     |  beqz RC, >3
@@ -3753,8 +3745,8 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     if (op == BC_RET1) {
       |  ld CRET1, 0(RA)
     }
-    |  decode_RB RB, INS
-    |   decode_RA RA, INS
+    |  decode_RB8 RB, INS
+    |   decode_RA8 RA, INS
     |   sub BASE, TMP2, RA
     if (op == BC_RET1) {
       |  sd CRET1, 0(TMP2)
@@ -3977,7 +3969,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |  sltu TMP0, NARGS8:RC, TMP1		// Check for missing parameters.
     |  bnez TMP0, >3
     if (op == BC_JFUNCF) {
-      |  decode_RD RD, INS
+      |  decode_RD8 RD, INS
       |  b =>BC_JLOOP
     } else {
       |  ins_next
-- 
2.42.0

