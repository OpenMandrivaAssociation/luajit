From c15778c21c0432fab362551328443e8e5fdeb7e1 Mon Sep 17 00:00:00 2001
From: Raymond Wong <infiwang@pm.me>
Date: Fri, 21 Oct 2022 21:16:50 +0800
Subject: [PATCH 009/156] riscv64(interp): fix branch global label overflow

Observed that branch imm12 "tostring"->"fff_fallback" overflowed;
thus introduce branch guarded jump, to replace direct branching
to global label.

This is by no means finished, archive purpose only.
---
 src/vm_riscv64.dasc | 299 ++++++++++++++++++++++++++++----------------
 1 file changed, 194 insertions(+), 105 deletions(-)

diff --git a/src/vm_riscv64.dasc b/src/vm_riscv64.dasc
index 9788b7ba..689306b6 100644
--- a/src/vm_riscv64.dasc
+++ b/src/vm_riscv64.dasc
@@ -167,6 +167,91 @@
 |//-----------------------------------------------------------------------
 |
 |// Pseudo-instruction macros
+|// Be cautious with local label 9 since we use them here!
+|.macro bxeq, a, b, tgt
+|  bne a, b, >9
+|  j tgt
+|9:
+|.endmacro
+|
+|.macro bxne, a, b, tgt
+|  beq a, b, >9
+|  j tgt
+|9:
+|.endmacro
+|
+|.macro bxlt, a, b, tgt
+|  bge a, b, >9
+|  j tgt
+|9:
+|.endmacro
+|
+|.macro bxge, a, b, tgt
+|  blt a, b, >9
+|  j tgt
+|9:
+|.endmacro
+|
+|.macro bxgt, a, b, tgt
+|  bge b, a, >9
+|  j tgt
+|9:
+|.endmacro
+|
+|.macro bxle, a, b, tgt
+|  blt b, a, >9
+|  j tgt
+|9:
+|.endmacro
+|
+|.macro bxltu, a, b, tgt
+|  bgeu a, b, >9
+|  j tgt
+|9:
+|.endmacro
+|
+|.macro bxgeu, a, b, tgt
+|  bltu a, b, >9
+|  j tgt
+|9:
+|.endmacro
+|
+|.macro bxgtu, a, b, tgt
+|  bgeu b, a, >9
+|  j tgt
+|9:
+|.endmacro
+|
+|.macro bxleu, a, b, tgt
+|  bltu b, a, >9
+|  j tgt
+|9:
+|.endmacro
+|
+|.macro bxeqz, a, tgt
+|  bxeq a, x0, tgt
+|.endmacro
+|
+|.macro bxnez, a, tgt
+|  bxne a, x0, tgt
+|.endmacro
+|
+|.macro bxlez, a, tgt
+|  bxge x0, a, tgt
+|.endmacro
+|
+|.macro bxgez, a, tgt
+|  bxge a, x0, tgt
+|.endmacro
+|
+|.macro bxltz, a, tgt
+|  bxlt a, x0, tgt
+|.endmacro
+|
+|.macro bxgtz, a, tgt
+|  bxlt x0, a, tgt
+|.endmacro
+|
 |.macro sxw, a, b, c
 |  lui x31, c
 |  srai x31, x31, 12
@@ -473,25 +558,25 @@
 |  gettp TMP4, reg
 |  addi TMP4, TMP4, tp
 |  cleartp reg
-|  bnez TMP4, target
+|  bxnez TMP4, target
 |.endmacro
 |.macro checktp, dst, reg, tp, target
 |  gettp TMP4, reg
 |  addi TMP4, TMP4, tp
 |  cleartp dst, reg
-|  bnez TMP4, target
+|  bxnez TMP4, target
 |.endmacro
 |.macro checkstr, reg, target; checktp reg, -LJ_TSTR, target; .endmacro
 |.macro checktab, reg, target; checktp reg, -LJ_TTAB, target; .endmacro
 |.macro checkfunc, reg, target; checktp reg, -LJ_TFUNC, target; .endmacro
 |.macro checkint, reg, target
 |  gettp TMP4, reg
-|  bne TMP4, TISNUM, target
+|  bxne TMP4, TISNUM, target
 |.endmacro
 |.macro checknum, reg, target
 |  gettp TMP4, reg
 |  sltiu TMP4, TMP4, LJ_TISNUM
-|  beqz TMP4, target
+|  bxeqz TMP4, target
 |.endmacro
 |
 |.macro mov_false, reg
@@ -523,7 +608,7 @@ static void build_subroutines(BuildCtx *ctx)
   |
   |  // Return from pcall or xpcall fast func.
   |  mov_true TMP1
-  |  beqz TMP0, ->cont_dispatch
+  |  bxeqz TMP0, ->cont_dispatch
   |  ld PC, FRAME_PC(TMP2)		// Fetch PC of previous frame.
   |  mv BASE, TMP2			// Restore caller base.
   |  // Prepending may overwrite the pcall frame, so do it at the end.
@@ -534,9 +619,9 @@ static void build_subroutines(BuildCtx *ctx)
   |  addiw RD, RD, 8			// RD = (nresults+1)*8.
   |  andi TMP0, PC, FRAME_TYPE
   |  liw CRET1, LUA_YIELD
-  |  beqz RD, ->vm_unwind_c_eh
+  |  bxeqz RD, ->vm_unwind_c_eh
   |  mv MULTRES, RD
-  |  beqz TMP0, ->BC_RET_Z		// Handle regular return to Lua.
+  |  bxeqz TMP0, ->BC_RET_Z		// Handle regular return to Lua.
   |
   |->vm_return:
   |  // BASE = base, RA = resultptr, RD/MULTRES = (nresults+1)*8, PC = return
@@ -545,7 +630,7 @@ static void build_subroutines(BuildCtx *ctx)
   |  xori TMP0, TMP0, FRAME_C
   |  and TMP2, PC, TMP2
   |  sub TMP2, BASE, TMP2		// TMP2 = previous base.
-  |  bnez TMP0, ->vm_returnp
+  |  bxnez TMP0, ->vm_returnp
   |
   |  addiw TMP1, RD, -8
   |  sd TMP2, L->base
@@ -717,7 +802,7 @@ static void build_subroutines(BuildCtx *ctx)
   |  andi TMP0, PC, FRAME_TYPE
   |   li TISNIL, LJ_TNIL
   |   li TISNUM, LJ_TISNUM
-  |  beqz TMP0, ->BC_RET_Z
+  |  bxeqz TMP0, ->BC_RET_Z
   |  j ->vm_return
   |
   |->vm_pcall:				// Setup protected C frame and enter VM.
@@ -823,7 +908,7 @@ static void build_subroutines(BuildCtx *ctx)
   |   sd BASE, L->base
   |   sub CARG3, CARG2, TMP1
   |  sd TMP0, 0(CARG2)
-  |  bne TMP1, CARG2, ->BC_CAT_Z
+  |  bxne TMP1, CARG2, ->BC_CAT_Z
   |  add RA, BASE, RA
   |  sd TMP0, 0(RA)
   |  j ->cont_nop
@@ -881,7 +966,7 @@ static void build_subroutines(BuildCtx *ctx)
   |  jal extern lj_tab_getinth		// (GCtab *t, int32_t key)
   |  // Returns cTValue * or NULL.
   |  mv TMP1, TISNIL
-  |  beqz CRET1, ->BC_TGETR_Z
+  |  bxeqz CRET1, ->BC_TGETR_Z
   |  ld TMP1, 0(CRET1)
   |  j ->BC_TGETR_Z
   |
@@ -959,7 +1044,7 @@ static void build_subroutines(BuildCtx *ctx)
   |  // Returns 0/1 or TValue * (metamethod).
   |3:
   |  sltiu TMP1, CRET1, 2
-  |  beqz TMP1, ->vmeta_binop
+  |  bxeqz TMP1, ->vmeta_binop
   |   negw TMP2, CRET1
   |4:
   |  lhu RD, OFS_RD(PC)
@@ -1033,7 +1118,7 @@ static void build_subroutines(BuildCtx *ctx)
   |  decode_OP1 CARG5, INS	// CARG5 == RB.
   |  jal extern lj_meta_arith		// (lua_State *L, TValue *ra,*rb,*rc, BCReg op)
   |  // Returns NULL (finished) or TValue * (metamethod).
-  |  beqz CRET1, ->cont_nop
+  |  bxeqz CRET1, ->cont_nop
   |
   |  // Call metamethod for binary op.
   |->vmeta_binop:
@@ -1057,7 +1142,7 @@ static void build_subroutines(BuildCtx *ctx)
   |  jal extern lj_meta_len		// (lua_State *L, TValue *o)
   |  // Returns NULL (retry) or TValue * (metamethod base).
 #if LJ_52
-  |  bnez CRET1, ->vmeta_binop		// Binop call for compatibility.
+  |  bxnez CRET1, ->vmeta_binop		// Binop call for compatibility.
   |  mv CARG1, MULTRES
   |  j ->BC_LEN_Z
 #else
@@ -1119,7 +1204,7 @@ static void build_subroutines(BuildCtx *ctx)
   |.macro .ffunc_1, name
   |->ff_ .. name:
   |  ld CARG1, 0(BASE)
-  |  beqz NARGS8:RC, ->fff_fallback
+  |  bxeqz NARGS8:RC, ->fff_fallback
   |.endmacro
   |
   |.macro .ffunc_2, name
@@ -1127,14 +1212,14 @@ static void build_subroutines(BuildCtx *ctx)
   |  sltiu TMP0, NARGS8:RC, 16
   |  ld CARG1, 0(BASE)
   |  ld CARG2, 8(BASE)
-  |  bnez TMP0, ->fff_fallback
+  |  bxnez TMP0, ->fff_fallback
   |.endmacro
   |
   |.macro .ffunc_n, name
   |->ff_ .. name:
   |  ld CARG1, 0(BASE)
   |  fld FARG1, 0(BASE)
-  |  beqz NARGS8:RC, ->fff_fallback
+  |  bxeqz NARGS8:RC, ->fff_fallback
   |  checknum CARG1, ->fff_fallback
   |.endmacro
   |
@@ -1143,7 +1228,7 @@ static void build_subroutines(BuildCtx *ctx)
   |  ld CARG1, 0(BASE)
   |    sltiu TMP0, NARGS8:RC, 16
   |   ld CARG2, 8(BASE)
-  |  bnez TMP0, ->fff_fallback
+  |  bxnez TMP0, ->fff_fallback
   |  gettp TMP1, CARG1
   |   gettp TMP2, CARG2
   |  sltiu TMP1, TMP1, LJ_TISNUM
@@ -1151,7 +1236,7 @@ static void build_subroutines(BuildCtx *ctx)
   |  fld FARG1, 0(BASE)
   |  and TMP1, TMP1, TMP2
   |   fld FARG2, 8(BASE)
-  |  beqz TMP1, ->fff_fallback
+  |  bxeqz TMP1, ->fff_fallback
   |.endmacro
   |
   |// Inlined GC threshold check.
@@ -1168,13 +1253,14 @@ static void build_subroutines(BuildCtx *ctx)
   |  gettp TMP1, CARG1
   |  sltiu TMP1, TMP1, LJ_TISTRUECOND
   |  addi RA, BASE, -16
-  |  beqz TMP1, ->fff_fallback
+  |  bxeqz TMP1, ->fff_fallback
   |  ld PC, FRAME_PC(BASE)
   |  addiw RD, NARGS8:RC, 8		// Compute (nresults+1)*8.
   |  addi TMP1, BASE, 8
   |  add TMP2, RA, RD
   |  sd CARG1, 0(RA)
-  |  beq BASE, TMP2, ->fff_res		// Done if exactly 1 argument.
+  |  bne BASE, TMP2, >1
+  |  j ->fff_res		// Done if exactly 1 argument.
   |1:
   |  ld TMP0, 0(TMP1)
   |  sd TMP0, -16(TMP1)
@@ -1212,7 +1298,7 @@ static void build_subroutines(BuildCtx *ctx)
   |3:
   |   lxd STR:RC, DISPATCH, DISPATCH_GL(gcroot[GCROOT_MMNAME+MM_metatable])
   |  li CARG1, LJ_TNIL
-  |  beqz TAB:RB, ->fff_restv
+  |  bxeqz TAB:RB, ->fff_restv
   |  lw TMP0, TAB:RB->hmask
   |   lw TMP1, STR:RC->sid
   |    ld NODE:TMP2, TAB:RB->node
@@ -1235,7 +1321,7 @@ static void build_subroutines(BuildCtx *ctx)
   |  settp CARG1, TMP3
   |  j ->fff_restv			// Not found, keep default result.
   |6:
-  |  bne CARG1, TISNIL, ->fff_restv
+  |  bxne CARG1, TISNIL, ->fff_restv
   |  j <5				// Ditto for nil value.
   |
   |7:
@@ -1259,10 +1345,10 @@ static void build_subroutines(BuildCtx *ctx)
   |  addi TMP3, TMP3, -LJ_TTAB
   |   cleartp TAB:CARG2
   |  or TMP3, TMP3, TAB:TMP0
-  |  bnez TMP3, ->fff_fallback
+  |  bxnez TMP3, ->fff_fallback
   |  andi TMP3, TMP2, LJ_GC_BLACK		// isblack(table)
   |  sd TAB:CARG2, TAB:TMP1->metatable
-  |  beqz TMP3, ->fff_restv
+  |  bxeqz TMP3, ->fff_restv
   |  barrierback TAB:TMP1, TMP2, TMP0, ->fff_restv
   |
   |.ffunc rawget
@@ -1273,7 +1359,7 @@ static void build_subroutines(BuildCtx *ctx)
   |  addi TMP1, TMP1, -LJ_TTAB
   |  or TMP0, TMP0, TMP1
   |  addi CARG3, BASE, 8
-  |  bnez TMP0, ->fff_fallback
+  |  bxnez TMP0, ->fff_fallback
   |  mv CARG1, L
   |  jal extern lj_tab_get	// (lua_State *L, GCtab *t, cTValue *key)
   |  // Returns cTValue *.
@@ -1289,7 +1375,7 @@ static void build_subroutines(BuildCtx *ctx)
   |  gettp TMP1, CARG1
   |  sltu TMP1, TISNUM, TMP1
   |  or TMP0, TMP0, TMP1
-  |  bnez TMP0, ->fff_fallback		// No args or CARG1 is not number
+  |  bxnez TMP0, ->fff_fallback		// No args or CARG1 is not number
   |  j ->fff_restv
   |
   |.ffunc_1 tostring
@@ -1297,13 +1383,13 @@ static void build_subroutines(BuildCtx *ctx)
   |  gettp TMP0, CARG1
   |  addi TMP1, TMP0, -LJ_TSTR
   |  // A __tostring method in the string base metatable is ignored.
-  |  beqz TMP1, ->fff_restv	// String key?
+  |  bxeqz TMP1, ->fff_restv	// String key?
   |  // Handle numbers inline, unless a number base metatable is present.
   |   lxd TMP1, DISPATCH, DISPATCH_GL(gcroot[GCROOT_BASEMT_NUM])
   |  sltu TMP0, TISNUM, TMP0
   |  sd BASE, L->base			// Add frame since C call can throw.
   |  or TMP0, TMP0, TMP1
-  |  bnez TMP0, ->fff_fallback
+  |  bxnez TMP0, ->fff_fallback
   |  sd PC, SAVE_PC(sp)		// Redundant (but a defined value).
   |  ffgccheck
   |  mv CARG1, L
@@ -1328,10 +1414,10 @@ static void build_subroutines(BuildCtx *ctx)
   |  // Returns 1=found, 0=end, -1=error.
   |//  addi RA, BASE, -16
   |  li RD, (2+1)*8
-  |  bgtz CRET1, ->fff_res		// Found key/value.
+  |  bxgtz CRET1, ->fff_res		// Found key/value.
   |  mv TMP1, CRET1
   |  mv CARG1, TISNIL
-  |  beqz TMP1, ->fff_restv		// End of traversal: return nil.
+  |  bxeqz TMP1, ->fff_restv		// End of traversal: return nil.
   |   ld CFUNC:RB, FRAME_FUNC(BASE)
   |  liw RC, 2*8
   |   cleartp CFUNC:RB
@@ -1344,7 +1430,7 @@ static void build_subroutines(BuildCtx *ctx)
   |  ld TAB:TMP2, TAB:TMP1->metatable
   |  ld TMP0, CFUNC:RB->upvalue[0]
   |  addi RA, BASE, -16
-  |  bnez TAB:TMP2, ->fff_fallback
+  |  bxnez TAB:TMP2, ->fff_fallback
 #else
   |  ld TMP0, CFUNC:RB->upvalue[0]
   |  addi RA, BASE, -16
@@ -1374,19 +1460,19 @@ static void build_subroutines(BuildCtx *ctx)
   |  ld TMP1, 0(TMP3)
   |1:
   |  li RD, (0+1)*8
-  |  beq TMP1, TISNIL, ->fff_res	// End of iteration, return 0 results.
+  |  bxeq TMP1, TISNIL, ->fff_res	// End of iteration, return 0 results.
   |  sd TMP1, -8(BASE)
   |  li RD, (2+1)*8
   |  j ->fff_res
   |2:  // Check for empty hash part first. Otherwise call C function.
   |  lw TMP0, TAB:CARG1->hmask
   |  li RD, (0+1)*8
-  |  beqz TMP0, ->fff_res
+  |  bxeqz TMP0, ->fff_res
   |  mv CARG2, TMP2
   |  jal extern lj_tab_getinth		// (GCtab *t, int32_t key)
   |  // Returns cTValue * or NULL.
   |  li RD, (0+1)*8
-  |  beqz CRET1, ->fff_res
+  |  bxeqz CRET1, ->fff_res
   |  ld TMP1, 0(CRET1)
   |  j <1
   |
@@ -1399,7 +1485,7 @@ static void build_subroutines(BuildCtx *ctx)
   |  ld CFUNC:TMP0, CFUNC:RB->upvalue[0]
   |  addi RA, BASE, -16
 #if LJ_52
-  |  bnez TAB:TMP2, ->fff_fallback
+  |  bxnez TAB:TMP2, ->fff_fallback
 #endif
   |  slli TMP1, TISNUM, 47
   |  sd CARG1, -8(BASE)
@@ -1414,13 +1500,13 @@ static void build_subroutines(BuildCtx *ctx)
   |  addi NARGS8:RC, NARGS8:RC, -8
   |   lxbu TMP3, DISPATCH, DISPATCH_GL(hookmask)
   |   mv TMP2, BASE
-  |  bltz NARGS8:RC, ->fff_fallback
+  |  bxltz NARGS8:RC, ->fff_fallback
   |   addi BASE, BASE, 16
   |  // Remember active hook before pcall.
   |  srliw TMP3, TMP3, HOOK_ACTIVE_SHIFT
   |  andi TMP3, TMP3, 1
   |  addi PC, TMP3, 16+FRAME_PCALL
-  |  beqz NARGS8:RC, ->vm_call_dispatch
+  |  bxeqz NARGS8:RC, ->vm_call_dispatch
   |1:
   |   add TMP0, BASE, NARGS8:RC
   |2:
@@ -1435,10 +1521,10 @@ static void build_subroutines(BuildCtx *ctx)
   |  ld CARG1, 0(BASE)
   |   ld CARG2, 8(BASE)
   |     lxbu TMP1, DISPATCH, DISPATCH_GL(hookmask)
-  |    bltz NARGS8:TMP0, ->fff_fallback
+  |    bxltz NARGS8:TMP0, ->fff_fallback
   |  gettp TMP2, CARG2
   |  addi TMP2, TMP2, -LJ_TFUNC
-  |  bnez TMP2, ->fff_fallback		// Traceback must be a function.
+  |  bxnez TMP2, ->fff_fallback		// Traceback must be a function.
   |   mv TMP2, BASE
   |  mv NARGS8:RC, NARGS8:TMP0
   |   addi BASE, BASE, 24
@@ -1448,8 +1534,8 @@ static void build_subroutines(BuildCtx *ctx)
   |  andi TMP3, TMP3, 1
   |   sd CARG1, 8(TMP2)
   |  addi PC, TMP3, 24+FRAME_PCALL
-  |  beqz NARGS8:RC, ->vm_call_dispatch
-  |  j <1
+  |  bnez NARGS8:RC, <1
+  |  j ->vm_call_dispatch
   |
   |//-- Coroutine library --------------------------------------------------
   |
@@ -1475,18 +1561,18 @@ static void build_subroutines(BuildCtx *ctx)
   |  not TMP4, TMP4
   |  and TMP3, TMP3, TMP4
   |   or CARG2, CARG2, TMP3
-  |  bgtz CARG4, ->fff_fallback		// st > LUA_YIELD?
+  |  bxgtz CARG4, ->fff_fallback		// st > LUA_YIELD?
   |   xor TMP2, TMP2, CARG3
   |   or CARG4, TMP2, TMP0
-  |  bnez TMP1, ->fff_fallback		// cframe != 0?
+  |  bxnez TMP1, ->fff_fallback		// cframe != 0?
   |  ld TMP0, L:CARG1->maxstack
   |   ld PC, FRAME_PC(BASE)
-  |  beqz CARG4, ->fff_fallback		// base == top && st == 0?
+  |  bxeqz CARG4, ->fff_fallback		// base == top && st == 0?
   |  add TMP2, CARG2, NARGS8:RC
   |  sltu CARG4, TMP0, TMP2
   |  sd BASE, L->base
   |  sd PC, SAVE_PC(sp)
-  |  bnez CARG4, ->fff_fallback		// Stack overflow?
+  |  bxnez CARG4, ->fff_fallback		// Stack overflow?
   |1:
   |.if resume
   |  addi BASE, BASE, 8		// Keep resumed thread in stack for GC.
@@ -1546,7 +1632,10 @@ static void build_subroutines(BuildCtx *ctx)
   |  andi TMP0, PC, FRAME_TYPE
   |  sd PC, SAVE_PC(sp)
   |   mv MULTRES, RD
-  |  beqz TMP0, ->BC_RET_Z
+  |//  bxeqz TMP0, ->BC_RET_Z	// Local label 9 in use
+  |  bnez TMP0, >6
+  |  j ->BC_RET_Z
+  |6:
   |  j ->vm_return
   |
   |8:  // Coroutine returned with error (at co->top-1).
@@ -1582,7 +1671,7 @@ static void build_subroutines(BuildCtx *ctx)
   |   sd BASE, L->base
   |  andi TMP0, TMP0, CFRAME_RESUME
   |   sd TMP1, L->top
-  |  beqz TMP0, ->fff_fallback
+  |  bxeqz TMP0, ->fff_fallback
   |  sd x0, L->cframe
   |    sb CRET1, L->status
   |  j ->vm_leave_unw
@@ -1593,10 +1682,10 @@ static void build_subroutines(BuildCtx *ctx)
   |->ff_math_ .. func:
   |  ld CARG1, 0(BASE)
   |   gettp TMP0, CARG1
-  |  beqz NARGS8:RC, ->fff_fallback
-  |  beq TMP0, TISNUM, ->fff_restv
+  |  bxeqz NARGS8:RC, ->fff_fallback
+  |  bxeq TMP0, TISNUM, ->fff_restv
   |   fld FARG1, 0(BASE)
-  |  bgeu TMP0, TISNUM, ->fff_fallback
+  |  bxgeu TMP0, TISNUM, ->fff_fallback
   |  jal ->vm_ .. func
   |  j ->fff_resn
   |.endmacro
@@ -1614,7 +1703,7 @@ static void build_subroutines(BuildCtx *ctx)
   |  sub CARG1, TMP1, TMP0
   |  slli TMP3, CARG1, 32
   |   settp CARG1, TISNUM
-  |  bgez TMP3, ->fff_restv
+  |  bxgez TMP3, ->fff_restv
   |  lui CARG1, 0x41e00		// 2^31 as a double.
   |  slli CARG1, CARG1, 32
   |  j ->fff_restv
@@ -1622,7 +1711,7 @@ static void build_subroutines(BuildCtx *ctx)
   |  sltiu TMP2, CARG2, LJ_TISNUM
   |  slli CARG1, CARG1, 1
   |  srli CARG1, CARG1, 1
-  |  beqz TMP2, ->fff_fallback		// int
+  |  bxeqz TMP2, ->fff_fallback		// int
   |// fallthrough
   |
   |->fff_restv:
@@ -1637,7 +1726,7 @@ static void build_subroutines(BuildCtx *ctx)
   |  andi TMP0, PC, FRAME_TYPE
   |   mv MULTRES, RD
   |  addi RA, BASE, -16
-  |  bnez TMP0, ->vm_return
+  |  bxnez TMP0, ->vm_return
   |  lw INS, -4(PC)
   |  decode_RB8 RB, INS
   |5:
@@ -1679,7 +1768,7 @@ static void build_subroutines(BuildCtx *ctx)
   |  li TMP1, 8
   |   ld CARG1, 0(BASE)
   |   fld FARG1, 0(BASE)
-  |  bne NARGS8:RC, TMP1, ->fff_fallback		// Need exactly 1 argument.
+  |  bxne NARGS8:RC, TMP1, ->fff_fallback		// Need exactly 1 argument.
   |  checknum CARG1, ->fff_fallback
   |  jal extern log
   |  j ->fff_resn
@@ -1733,7 +1822,7 @@ static void build_subroutines(BuildCtx *ctx)
   |  checkint CARG1, >4
   |1:  // Handle integers.
   |   ld CARG2, 0(TMP2)
-  |  beq TMP2, TMP3, ->fff_restv
+  |  bxeq TMP2, TMP3, ->fff_restv
   |   sext.w CARG1, CARG1
   |  checkint CARG2, >3
   |   sext.w CARG2, CARG2
@@ -1758,7 +1847,7 @@ static void build_subroutines(BuildCtx *ctx)
   |   ld CARG2, 0(TMP2)
   |  checknum CARG1, ->fff_fallback
   |  fld FTMP4, 0(TMP2)
-  |  beq TMP2, TMP3, ->fff_resn
+  |  bxeq TMP2, TMP3, ->fff_resn
   |  checknum CARG2, >7
   |6:
   |  fpins FRET1, FTMP3, FTMP4
@@ -1785,7 +1874,7 @@ static void build_subroutines(BuildCtx *ctx)
   |  addi TMP0, TMP0, -LJ_TSTR
   |  or TMP1, TMP1, TMP0
   |   cleartp STR:CARG1
-  |  bnez TMP1, ->fff_fallback		// Need exactly 1 string argument.
+  |  bxnez TMP1, ->fff_fallback		// Need exactly 1 string argument.
   |  lw TMP0, STR:CARG1->len
   |    ld PC, FRAME_PC(BASE)
   |  snez RD, TMP0
@@ -1808,7 +1897,7 @@ static void build_subroutines(BuildCtx *ctx)
   |   sltu TMP2, TMP2, CARG1		// !(255 < n).
   |   or TMP1, TMP1, TMP2
   |   li CARG3, 1
-  |  bnez TMP1, ->fff_fallback
+  |  bxnez TMP1, ->fff_fallback
   |  addi CARG2, sp, TMPD_OFS
   |  sb CARG1, TMPD(sp)
   |->fff_newstr:
@@ -1830,7 +1919,7 @@ static void build_subroutines(BuildCtx *ctx)
   |  ld CARG3, 16(BASE)
   |  addi TMP0, NARGS8:RC, -16
   |   gettp TMP1, CARG1
-  |  bltz TMP0, ->fff_fallback
+  |  bxltz TMP0, ->fff_fallback
   |  cleartp STR:CARG1, CARG1
   |   liw CARG4, -1
   |  beqz TMP0, >1
@@ -1840,7 +1929,7 @@ static void build_subroutines(BuildCtx *ctx)
   |  checkint CARG2, ->fff_fallback
   |  addi TMP0, TMP1, -LJ_TSTR
   |   sext.w CARG3, CARG2
-  |  bnez TMP0, ->fff_fallback
+  |  bxnez TMP0, ->fff_fallback
   |  lw CARG2, STR:CARG1->len
   |  // STR:CARG1 = str, CARG2 = str->len, CARG3 = start, CARG4 = end
   |  addiw TMP0, CARG2, 1
@@ -1871,7 +1960,7 @@ static void build_subroutines(BuildCtx *ctx)
   |  sub CARG3, CARG4, CARG3		// len = end - start
   |   addi CARG2, CARG2, sizeof(GCstr)-1
   |   addiw CARG3, CARG3, 1             // len += 1
-  |  bgez CARG3, ->fff_newstr
+  |  bxgez CARG3, ->fff_newstr
   |->fff_emptystr:  // Return empty string.
   |  li TMP1, LJ_TSTR
   |  addxi STR:CARG1, DISPATCH, DISPATCH_GL(strempty)
@@ -1882,7 +1971,7 @@ static void build_subroutines(BuildCtx *ctx)
   |  .ffunc string_ .. name
   |  ffgccheck
   |   ld CARG2, 0(BASE)
-  |  beqz NARGS8:RC, ->fff_fallback
+  |  bxeqz NARGS8:RC, ->fff_fallback
   |  checkstr STR:CARG2, ->fff_fallback
   |  addxi SBUF:CARG1, DISPATCH, DISPATCH_GL(tmpbuf)
   |  ld TMP0, SBUF:CARG1->b
@@ -1905,7 +1994,7 @@ static void build_subroutines(BuildCtx *ctx)
   |
   |->vm_tobit_fb:
   |  fld FARG1, 0(BASE)
-  |  beqz TMP1, ->fff_fallback
+  |  bxeqz TMP1, ->fff_fallback
   |   fadd.d FARG1, FARG1, TOBIT
   |  fmv.x.w CRET1, FARG1
   |  zext.w CRET1, CRET1
@@ -1927,7 +2016,7 @@ static void build_subroutines(BuildCtx *ctx)
   |  add TMP3, BASE, NARGS8:RC
   |1:
   |   ld TMP1, 0(TMP2)
-  |  beq TMP2, TMP3, ->fff_resi
+  |  bxeq TMP2, TMP3, ->fff_resi
   |  gettp TMP0, TMP1
   |   addi TMP2, TMP2, 8
   |  bne TMP0, TISNUM, >2
@@ -1938,7 +2027,7 @@ static void build_subroutines(BuildCtx *ctx)
   |   fld FARG1, -8(TMP2)
   |  sltiu TMP0, TMP0, LJ_TISNUM
   |   fadd.d FARG1, FARG1, TOBIT
-  |  beqz TMP0, ->fff_fallback
+  |  bxeqz TMP0, ->fff_fallback
   |  fmv.x.w TMP1, FARG1
   |  zext.w TMP1, TMP1
   |   bins CRET1, CRET1, TMP1
@@ -1980,7 +2069,7 @@ static void build_subroutines(BuildCtx *ctx)
   |1:
   |  gettp TMP0, CARG2
   |   zext.w CARG2, CARG2
-  |  bne TMP0, TISNUM, ->fff_fallback
+  |  bxne TMP0, TISNUM, ->fff_fallback
   |  sext.w CARG1, CARG1
   |  shins CRET1, CARG1, CARG2
   |   zext.w CRET1, CRET1
@@ -2011,13 +2100,13 @@ static void build_subroutines(BuildCtx *ctx)
   |  // Either throws an error, or recovers and returns -1, 0 or nresults+1.
   |  ld BASE, L->base
   |   slliw RD, CRET1, 3
-  |  bgtz CRET1, ->fff_res		// Returned nresults+1?
+  |  bxgtz CRET1, ->fff_res		// Returned nresults+1?
   |1:  // Returned 0 or -1: retry fast path.
   |   ld LFUNC:RB, FRAME_FUNC(BASE)
   |  ld TMP0, L->top
   |   sub NARGS8:RC, TMP0, BASE
   |   cleartp LFUNC:RB
-  |  bnez CRET1, ->vm_call_tail		// Returned -1?
+  |  bxnez CRET1, ->vm_call_tail		// Returned -1?
   |  ins_callt				// Returned 0: retry fast path.
   |
   |// Reconstruct previous base for vmeta_call during tailcall.
@@ -2240,7 +2329,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |2:  // RA is not an integer.
     |  sltiu TMP1, CARG3, LJ_TISNUM
     |  lui TMP3, (-(BCBIAS_J*4 >> 12)) & 0xfffff		// -BCBIAS_J*4
-    |  beqz TMP1, ->vmeta_comp
+    |  bxeqz TMP1, ->vmeta_comp
     |  sltiu TMP1, CARG4, LJ_TISNUM
     |  decode_BC4b TMP2
     |  beqz TMP1, >4
@@ -2267,7 +2356,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |
     |4:  // RA is a number, RD is not a number.
     |  // RA is a number, RD is an integer. Convert RD to a number.
-    |  bne CARG4, TISNUM, ->vmeta_comp
+    |  bxne CARG4, TISNUM, ->vmeta_comp
     if (op == BC_ISLT || op == BC_ISGE) {
       |  fcvt.d.w FTMP2, CARG2
       |  fmv.d.x FTMP0, CARG1
@@ -2280,7 +2369,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |5:  // RA is an integer, RD is not an integer
     |  sltiu TMP1, CARG4, LJ_TISNUM
     |  lui TMP3, (-(BCBIAS_J*4 >> 12)) & 0xfffff		// -BCBIAS_J*4
-    |  beqz TMP1, ->vmeta_comp
+    |  bxeqz TMP1, ->vmeta_comp
     |  // RA is an integer, RD is a number. Convert RA to a number.
     if (op == BC_ISLT || op == BC_ISGE) {
       |  fcvt.d.w FTMP0, CARG1
@@ -2308,9 +2397,9 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |  or TMP0, TMP0, TMP1
     |  lui TMP3, (-(BCBIAS_J*4 >> 12)) & 0xfffff		// -BCBIAS_J*4
     if (vk) {
-      |  beqz TMP0, ->BC_ISEQN_Z
+      |  bxeqz TMP0, ->BC_ISEQN_Z
     } else {
-      |  beqz TMP0, ->BC_ISNEN_Z
+      |  bxeqz TMP0, ->BC_ISNEN_Z
     }
     |// Either or both types are not numbers.
     |  lui TMP3, (-(BCBIAS_J*4 >> 12)) & 0xfffff		// -BCBIAS_J*4
@@ -2335,7 +2424,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     if (vk) {
       |  beqz TMP0, <1
     } else {
-      |  beqz TMP0, ->BC_ISEQV_Z  // Reuse code from opposite instruction.
+      |  bxeqz TMP0, ->BC_ISEQV_Z  // Reuse code from opposite instruction.
     }
     |  // Different tables or userdatas. Need to check __eq metamethod.
     |  // Field metatable must be at same offset for GCtab and GCudata!
@@ -2351,7 +2440,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
       |  lbu TMP3, TAB:TMP3->nomm
       |  andi TMP3, TMP3, 1<<MM_eq
       |  liw TMP0, 1		// ne = 1
-      |  bnez TMP3, ->BC_ISEQV_Z	// Or 'no __eq' flag set?
+      |  bxnez TMP3, ->BC_ISEQV_Z	// Or 'no __eq' flag set?
     }
     |  j ->vmeta_equal			// Handle __eq metamethod.
     break;
@@ -2512,7 +2601,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |  ld TMP0, 0(TMP0)
     |  gettp TMP0, TMP0
     |  add TMP0, TMP0, TMP1		// if itype of RA == type, then TMP0=0
-    |  bnez TMP0, ->vmeta_istype
+    |  bxnez TMP0, ->vmeta_istype
     |  ins_next
     break;
   case BC_ISNUM:
@@ -2558,14 +2647,14 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |  gettp CARG3, TMP0
     |  bne CARG3, TISNUM, >1
     |  negw TMP0, TMP0
-    |  beq TMP0, TMP1, ->vmeta_unm      // Meta handler deals with -2^31.
+    |  bxeq TMP0, TMP1, ->vmeta_unm      // Meta handler deals with -2^31.
     |  zext.w TMP0, TMP0
     |  settp TMP0, TISNUM
     |  j >2
     |1:
     |  sltiu TMP3, CARG3, LJ_TISNUM
     |   slli TMP1, TMP1, 32
-    |  beqz TMP3, ->vmeta_unm
+    |  bxeqz TMP3, ->vmeta_unm
     |   xor TMP0, TMP0, TMP1     // sign => ~sign
     |2:
     |   sd TMP0, 0(RA)
@@ -2587,7 +2676,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |  ins_next
     |2:
     |  addi TMP2, TMP1, -LJ_TTAB
-    |  bnez TMP2, ->vmeta_len
+    |  bxnez TMP2, ->vmeta_len
 #if LJ_52
     |  ld TAB:TMP2, TAB:CARG1->metatable
     |  bnez TAB:TMP2, >9
@@ -2650,7 +2739,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |  fld FTMP2, 0(RC)
     |  and itype1, itype1, itype2
     |  add RA, BASE, RA
-    |  beqz itype1, ->vmeta_arith
+    |  bxeqz itype1, ->vmeta_arith
     |  fpins FRET1, FTMP0, FTMP2
     |  ins_next1
     |  fsd FRET1, 0(RA)
@@ -2678,21 +2767,21 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |  xor TMP2, CRET1, CARG4
     |  and TMP1, TMP1, TMP2
     |  add RA, BASE, RA
-    |  bltz TMP1, ->vmeta_arith
+    |  bxltz TMP1, ->vmeta_arith
     |.elif "intins" == "subw"
     |  intins CRET1, CARG3, CARG4
     |  xor TMP1, CRET1, CARG3		// ((y^a) & (a^b)) < 0: overflow.
     |  xor TMP2, CARG3, CARG4
     |  and TMP1, TMP1, TMP2
     |  add RA, BASE, RA
-    |  bltz TMP1, ->vmeta_arith
+    |  bxltz TMP1, ->vmeta_arith
     |.elif "intins" == "mulw"
     |  mulw CRET1, CARG3, CARG4
     |  mul TMP2, CARG3, CARG4
     |  sraiw TMP1, CRET1, 31
     |  srai TMP2, TMP2, 32
     |  add RA, BASE, RA
-    |  bne TMP1, TMP2, ->vmeta_arith		// 63-32bit not all 0 or 1: overflow.
+    |  bxne TMP1, TMP2, ->vmeta_arith		// 63-32bit not all 0 or 1: overflow.
     |.endif
     |  zext.w CRET1, CRET1
     |  settp CRET1, TISNUM
@@ -2716,7 +2805,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |  sext.w CARG1, CARG1
     |  sext.w CARG2, CARG2
     |  add RA, BASE, RA
-    |  beqz CARG2, ->vmeta_arith
+    |  bxeqz CARG2, ->vmeta_arith
     |  jal extern lj_vm_modi
     |  zext.w CRET1, CRET1
     |  settp CRET1, TISNUM
@@ -2751,7 +2840,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |   sltiu TMP1, TMP1, LJ_TISNUM
     |  and TMP0, TMP0, TMP1
     |   add RA, BASE, RA
-    |  beqz TMP0, ->vmeta_arith
+    |  bxeqz TMP0, ->vmeta_arith
     |  fld FARG1, 0(RB)
     |  fld FARG2, 0(RC)
     |  jal extern pow
@@ -2775,7 +2864,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |  jal extern lj_meta_cat		// (lua_State *L, TValue *top, int left)
     |  // Returns NULL (finished) or TValue * (metamethod).
     |   ld BASE, L->base
-    |  bnez CRET1, ->vmeta_binop
+    |  bxnez CRET1, ->vmeta_binop
     |  add RB, BASE, MULTRES
     |  ld TMP0, 0(RB)
     |   add RA, BASE, RA
@@ -3059,7 +3148,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |   ld TMP1, TAB:RB->array
     |  sltu TMP3, TMP2, TMP0		//array part (keys = [0, asize-1])
     |   slliw TMP2, TMP2, 3
-    |  beqz TMP3, ->vmeta_tgetv		// Integer key and in array part?
+    |  bxeqz TMP3, ->vmeta_tgetv		// Integer key and in array part?
     |   add TMP2, TMP1, TMP2
     |   ld CRET1, 0(TMP2)
     |  beq CRET1, TISNIL, >2
@@ -3078,7 +3167,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |5:
     |  li TMP0, LJ_TSTR
     |   cleartp RC, TMP2
-    |  bne TMP3, TMP0, ->vmeta_tgetv	// String key?
+    |  bxne TMP3, TMP0, ->vmeta_tgetv	// String key?
     |  j ->BC_TGETS_Z
     break;
   case BC_TGETS:
@@ -3140,7 +3229,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |   ld TMP2, TAB:RB->array
     |  sltu TMP1, TMP0, TMP1
     |   add RC, TMP2, RC
-    |  beqz TMP1, ->vmeta_tgetb
+    |  bxeqz TMP1, ->vmeta_tgetb
     |   ld CRET1, 0(RC)
     |  beq CRET1, TISNIL, >5
     |1:
@@ -3170,7 +3259,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |  sltu TMP0, CARG2, TMP0
     |   slliw TMP2, CARG2, 3
     |   add TMP3, TMP1, TMP2
-    |  beqz TMP0, ->vmeta_tgetr		// In array part?
+    |  bxeqz TMP0, ->vmeta_tgetr		// In array part?
     |   ld TMP1, 0(TMP3)
     |->BC_TGETR_Z:
     |  ins_next1
@@ -3194,7 +3283,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |   ld TMP1, TAB:RB->array
     |  sltu TMP0, RC, TMP0
     |   slliw TMP2, RC, 3
-    |  beqz TMP0, ->vmeta_tsetv		// Integer key and in array part?
+    |  bxeqz TMP0, ->vmeta_tsetv		// Integer key and in array part?
     |  add TMP1, TMP1, TMP2
     |   lbu TMP3, TAB:RB->marked
     |  ld TMP0, 0(TMP1)
@@ -3217,7 +3306,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |5:
     |  gettp TMP0, TMP2
     |  addi TMP0, TMP0, -LJ_TSTR
-    |  bnez TMP0, ->vmeta_tsetv
+    |  bxnez TMP0, ->vmeta_tsetv
     |  cleartp STR:RC, TMP2
     |  j ->BC_TSETS_Z			// String key?
     |
@@ -3282,7 +3371,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |  beqz TAB:TMP2, >6		// No metatable: continue.
     |  lbu TMP0, TAB:TMP2->nomm
     |  andi TMP0, TMP0, 1<<MM_newindex
-    |  beqz TMP0, ->vmeta_tsets		// 'no __newindex' flag NOT set: check.
+    |  bxeqz TMP0, ->vmeta_tsets		// 'no __newindex' flag NOT set: check.
     |6:
     |  sd RC, 0(CARG3)
     |   sd BASE, L->base
@@ -3311,7 +3400,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |   ld TMP2, TAB:RB->array
     |  sltu TMP1, TMP0, TMP1
     |   add RC, TMP2, RC
-    |  beqz TMP1, ->vmeta_tsetb
+    |  bxeqz TMP1, ->vmeta_tsetb
     |  ld TMP1, 0(RC)
     |   lbu TMP3, TAB:RB->marked
     |  beq TMP1, TISNIL, >5
@@ -3353,7 +3442,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |  sltu TMP0, CARG3, TMP0
     |   slliw TMP2, CARG3, 3
     |   add CRET1, TMP1, TMP2
-    |  beqz TMP0, ->vmeta_tsetr		// In array part?
+    |  bxeqz TMP0, ->vmeta_tsetr		// In array part?
     |->BC_TSETR_Z:
     |  ld TMP1, 0(RA)
     |  ins_next1
@@ -3680,7 +3769,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |1:
     |  andi TMP0, PC, FRAME_TYPE
     |   xori TMP1, PC, FRAME_VARG
-    |  bnez TMP0, ->BC_RETV_Z
+    |  bxnez TMP0, ->BC_RETV_Z
     |
     |->BC_RET_Z:
     |  // BASE = base, RA = resultptr, RD = (nresults+1)*8, PC = return
@@ -3717,7 +3806,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |
     |->BC_RETV_Z:  // Non-standard return case.
     |  andi TMP2, TMP1, FRAME_TYPEP
-    |  bnez TMP2, ->vm_return
+    |  bxnez TMP2, ->vm_return
     |  // Return from vararg function: relocate BASE down.
     |  sub BASE, BASE, TMP1
     |   ld PC, FRAME_PC(BASE)
@@ -3731,7 +3820,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |    mv MULTRES, RD
     |  andi TMP0, PC, FRAME_TYPE
     |   xori TMP1, PC, FRAME_VARG
-    |  bnez TMP0, ->BC_RETV_Z
+    |  bxnez TMP0, ->BC_RETV_Z
     |  lw INS, -4(PC)
     |   addi TMP2, BASE, -16
     if (op == BC_RET1) {
@@ -3795,8 +3884,8 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |   sext.w CARG4, CARG1		// start
     |   sext.w CARG3, CARG3		// stop
     if (!vk) {				// init
-      |  bne CARG6, TISNUM, ->vmeta_for
-      |  bne CARG5, TISNUM, ->vmeta_for
+      |  bxne CARG6, TISNUM, ->vmeta_for
+      |  bxne CARG5, TISNUM, ->vmeta_for
       |   bextfi TMP0, CARG2, 31, 31	// sign
       |  slt CARG2, CARG3, CARG4
       |  slt TMP1, CARG4, CARG3
@@ -3864,7 +3953,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
       |  sltiu TMP1, CARG6, LJ_TISNUM	// stop is number ?
       |  and TMP3, TMP3, TMP1
       |  and TMP0, TMP0, TMP3
-      |  beqz TMP0, ->vmeta_for		// if start or step or stop isn't number
+      |  bxeqz TMP0, ->vmeta_for		// if start or step or stop isn't number
       |  flt.d TMP3, FTMP0, FTMP1		// start < stop ?
       |  flt.d TMP4, FTMP1, FTMP0		// stop < start ?
       |  neg TMP3, TMP3
@@ -3959,7 +4048,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |    ld KBASE, -4+PC2PROTO(k)(PC)
     |  sltu TMP0, TMP2, RA
     |   slliw TMP1, TMP1, 3			// numparams*8
-    |  bnez TMP0, ->vm_growstack_l
+    |  bxnez TMP0, ->vm_growstack_l
     |2:
     |  sltu TMP0, NARGS8:RC, TMP1		// Check for missing parameters.
     |  bnez TMP0, >3
@@ -3996,7 +4085,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |  sltu TMP0, TMP0, TMP2
     |    ld KBASE, -4+PC2PROTO(k)(PC)
     |   sd TMP3, 8(TMP1)                // Store delta + FRAME_VARG.
-    |  beqz TMP0, ->vm_growstack_l
+    |  bxeqz TMP0, ->vm_growstack_l
     |  lbu TMP2, -4+PC2PROTO(numparams)(PC)
     |   mv RA, BASE
     |   mv RC, TMP1
@@ -4053,7 +4142,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
       |  ld CARG2, CFUNC:RB->f
     }
     |   mv CARG1, L
-    |  bnez TMP3, ->vm_growstack_c	// Need to grow stack.
+    |  bxnez TMP3, ->vm_growstack_c	// Need to grow stack.
     |    st_vmstate			// sxw TMP0, DISPATCH, DISPATCH_GL(vmstate)
     |  jalr CARG4		// (lua_State *L [, lua_CFunction f])
     |  // Returns nresults.
-- 
2.42.0

