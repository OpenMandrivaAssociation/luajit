From 86f49dbedd68b6d1bb298e7968360d2d8d09a515 Mon Sep 17 00:00:00 2001
From: Raymond Wong <infiwang@pm.me>
Date: Mon, 13 Feb 2023 18:01:31 +0800
Subject: [PATCH 028/156] riscv(interp): optimize branch

Fuse slt/sltu + beqz/bnez pairs into a single branch instruction and
drop unnessasary bx*(^b+j).
Several tricky ones were left untouched, might need to reallocate
registers.

This is a WIP, archive only.
---
 src/vm_riscv64.dasc | 83 ++++++++++++++++-----------------------------
 1 file changed, 30 insertions(+), 53 deletions(-)

diff --git a/src/vm_riscv64.dasc b/src/vm_riscv64.dasc
index 47cf6c43..f749f9be 100644
--- a/src/vm_riscv64.dasc
+++ b/src/vm_riscv64.dasc
@@ -632,11 +632,9 @@ static void build_subroutines(BuildCtx *ctx)
   |
   |6:
   |  ld TMP1, L->maxstack
-  |  slt TMP0, TMP2, RD
+  |  blt TMP2, RD, >7
   |  // More results wanted. Check stack size and fill up results with nil.
-  |  slt TMP1, BASE, TMP1
-  |  bnez TMP0, >7
-  |  beqz TMP1, >9
+  |  bge BASE, TMP1, >9
   |  sd TISNIL, 0(BASE)
   |  addiw RD, RD, 8
   |  addi BASE, BASE, 8
@@ -1699,11 +1697,10 @@ static void build_subroutines(BuildCtx *ctx)
   |  lw INS, -4(PC)
   |  decode_RB8 RB, INS
   |5:
-  |  sltu TMP2, RD, RB
+  |  bltu RD, RB, >6			// More results expected?
   |  decode_RA8a TMP0, INS
-  |  bnez TMP2, >6			// More results expected?
-  |  decode_RA8b TMP0
   |  ins_next1
+  |  decode_RA8b TMP0
   |  // Adjust BASE. KBASE is assumed to be set for the calling frame.
   |  sub BASE, RA, TMP0
   |  ins_next2
@@ -1908,27 +1905,19 @@ static void build_subroutines(BuildCtx *ctx)
   |  lw CARG2, STR:CARG1->len
   |  // STR:CARG1 = str, CARG2 = str->len, CARG3 = start, CARG4 = end
   |  addiw TMP0, CARG2, 1
-  |  sltz TMP3, CARG4
-  |  addw TMP2, CARG4, TMP0
-  |   sltz TMP1, CARG3
-  |  beqz TMP3, >2
-  |  mv CARG4, TMP2		// if (end < 0) end += len+1
+  |  bgez CARG4, >2
+  |  addw CARG4, CARG4, TMP0		// if (end < 0) end += len+1
   |2:
-  |  addw TMP2, CARG3, TMP0
-  |  beqz TMP1, >3
-  |  mv CARG3, TMP2		// if (start < 0) start += len+1
+  |  bgez CARG3, >3
+  |  addw CARG3, CARG3, TMP0		// if (start < 0) start += len+1
   |3:
-  |  li TMP3, 1
-  |  sltz TMP2, CARG4
-  |   sgtz TMP1, CARG3
-  |  beqz TMP2, >4
+  |  bgez CARG4, >4
   |  mv CARG4, x0			// if (end < 0) end = 0
   |4:
-  |  bnez TMP1, >5
-  |   mv CARG3, TMP3		// if (start < 1) start = 1
+  |  bgtz CARG3, >5
+  |   li CARG3, 1		// if (start < 1) start = 1
   |5:
-  |  slt TMP2, CARG2, CARG4
-  |  beqz TMP2, >6
+  |  ble CARG4, CARG2, >6
   |  mv CARG4, CARG2		// if (end > len) end = len
   |6:
   |   add CARG2, STR:CARG1, CARG3
@@ -2378,9 +2367,9 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |  or TMP0, TMP0, TMP1
     |  lui TMP3, (-(BCBIAS_J*4 >> 12)) & 0xfffff		// -BCBIAS_J*4
     if (vk) {
-      |  bxeqz TMP0, ->BC_ISEQN_Z
+      |  beqz TMP0, ->BC_ISEQN_Z
     } else {
-      |  bxeqz TMP0, ->BC_ISNEN_Z
+      |  beqz TMP0, ->BC_ISNEN_Z
     }
     |// Either or both types are not numbers.
     |  lui TMP3, (-(BCBIAS_J*4 >> 12)) & 0xfffff		// -BCBIAS_J*4
@@ -2405,7 +2394,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     if (vk) {
       |  beqz TMP0, <1
     } else {
-      |  bxeqz TMP0, ->BC_ISEQV_Z  // Reuse code from opposite instruction.
+      |  beqz TMP0, ->BC_ISEQV_Z  // Reuse code from opposite instruction.
     }
     |  // Different tables or userdatas. Need to check __eq metamethod.
     |  // Field metatable must be at same offset for GCtab and GCudata!
@@ -2421,7 +2410,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
       |  lbu TMP3, TAB:TMP3->nomm
       |  andi TMP3, TMP3, 1<<MM_eq
       |  liw TMP0, 1		// ne = 1
-      |  bxnez TMP3, ->BC_ISEQV_Z	// Or 'no __eq' flag set?
+      |  bnez TMP3, ->BC_ISEQV_Z	// Or 'no __eq' flag set?
     }
     |  j ->vmeta_equal			// Handle __eq metamethod.
     break;
@@ -2494,9 +2483,8 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |  ins_next
     |
     |4:  // RA is not an integer.
-    |  sltu TMP0, CARG3, TISNUM
+    |  bgeu CARG3, TISNUM, <2
     |    addw TMP2, TMP2, TMP3
-    |  beqz TMP0, <2
     |  fmv.d.x FTMP0, CARG1
     |   fmv.d.x FTMP2, CARG2
     |  bne CARG4, TISNUM, >5
@@ -2509,8 +2497,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |  j <1
     |
     |6: // RA is an integer, RD is a number.
-    |  sltu TMP0, CARG4, TISNUM
-    |  beqz TMP0, <2
+    |  bgeu CARG4, TISNUM, <2
     |  fcvt.d.w FTMP0, CARG1
     |   fmv.d.x FTMP2, CARG2
     |  j <5
@@ -3054,9 +3041,8 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |  ld TMP0, GL->gc.total
     |  ld TMP1, GL->gc.threshold
     |   sd BASE, L->base
-    |  sltu TMP2, TMP0, TMP1
     |   sd PC, SAVE_PC(sp)
-    |  beqz TMP2, >5
+    |  bgeu TMP0, TMP1, >5
     |1:
     if (op == BC_TNEW) {
       |  srliw CARG2, RD, 3
@@ -3451,18 +3437,16 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |   slliw TMP1, TMP3, 3
     |    lbu TMP3, TAB:CARG2->marked
     |   ld CARG1, TAB:CARG2->array
-    |  sltu TMP4, TMP2, CARG3
+    |  bltu TMP2, CARG3, >5
     |   add TMP2, RA, TMP0
-    |  bnez TMP4, >5
     |   add TMP1, TMP1, CARG1
     |  andi TMP0, TMP3, LJ_GC_BLACK	// isblack(table)
     |3:  // Copy result slots to table.
     |   ld CRET1, 0(RA)
     |    addi RA, RA, 8
-    |  sltu TMP4, RA, TMP2
     |   sd CRET1, 0(TMP1)
     |    addi TMP1, TMP1, 8
-    |  bnez TMP4, <3
+    |  bltu RA, TMP2, <3
     |  bnez TMP0, >7
     |4:
     |  ins_next
@@ -3591,9 +3575,8 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |   ld TMP1, TAB:RB->array
     |  slli CARG3, TISNUM, 47
     |1:  // Traverse array part.
-    |  sltu TMP2, RC, TMP0
+    |  bleu TMP0, RC, >5			// Index points after array part?
     |   slliw TMP3, RC, 3
-    |  beqz TMP2, >5			// Index points after array part?
     |  add TMP3, TMP1, TMP3
     |  ld CARG1, 0(TMP3)
     |     lhu RD, -4+OFS_RD(PC)		// ITERL RD
@@ -3615,9 +3598,8 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |  subw RC, RC, TMP0
     |   ld TMP2, TAB:RB->node
     |6:
-    |  sltu CARG1, TMP1, RC		// End of iteration? Branch to ITERL+1.
+    |  bltu TMP1, RC, <3		// End of iteration? Branch to ITERL+1.
     |   slliw TMP3, RC, 5
-    |  bnez CARG1, <3
     |   slliw RB, RC, 3
     |   subw TMP3, TMP3, RB
     |  add NODE:TMP3, TMP3, TMP2	// node = tab->node + (idx*32-idx*8)
@@ -3705,16 +3687,14 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |   li MULTRES, 8		// MULTRES = (0+1)*8
     |  blez TMP1, <3			// No vararg slots?
     |  add TMP2, RA, TMP1
-    |  sltu TMP2, TMP0, TMP2
     |   addi MULTRES, TMP1, 8
-    |  bnez TMP2, >7
+    |  bltu TMP0, TMP2, >7
     |6:
     |  ld CRET1, 0(RC)
     |   addi RC, RC, 8
     |  sd CRET1, 0(RA)
-    |  sltu TMP0, RC, TMP3
     |   addi RA, RA, 8
-    |  bnez TMP0, <6			// More vararg slots?
+    |  bltu RC, TMP3, <6			// More vararg slots?
     |  j <3
     |
     |7:  // Grow stack for varargs.
@@ -3751,7 +3731,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |1:
     |  andi TMP0, PC, FRAME_TYPE
     |   xori TMP1, PC, FRAME_VARG
-    |  bxnez TMP0, ->BC_RETV_Z
+    |  bnez TMP0, ->BC_RETV_Z
     |
     |->BC_RET_Z:
     |  // BASE = base, RA = resultptr, RD = (nresults+1)*8, PC = return
@@ -3773,9 +3753,8 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |3:
     |  addi TMP3, TMP3, -8
     |5:
-    |  sltu TMP0, TMP2, TMP3
+    |  bltu TMP2, TMP3, >6
     |   ld LFUNC:TMP1, FRAME_FUNC(BASE)
-    |  bnez TMP0, >6
     |  cleartp LFUNC:TMP1
     |  ld TMP1, LFUNC:TMP1->pc
     |  ld KBASE, PC2PROTO(k)(TMP1)
@@ -3802,7 +3781,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |    mv MULTRES, RD
     |  andi TMP0, PC, FRAME_TYPE
     |   xori TMP1, PC, FRAME_VARG
-    |  bxnez TMP0, ->BC_RETV_Z
+    |  bnez TMP0, ->BC_RETV_Z
     |  lw INS, -4(PC)
     |   addi TMP2, BASE, -16
     if (op == BC_RET1) {
@@ -3815,9 +3794,8 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
       |  sd CRET1, 0(TMP2)
     }
     |5:
-    |  sltu TMP0, RD, RB
+    |  bltu RD, RB, >6
     |   ld TMP1, FRAME_FUNC(BASE)
-    |  bnez TMP0, >6
     |  cleartp LFUNC:TMP1
     |  ld TMP1, LFUNC:TMP1->pc
     |  ins_next1
@@ -4031,8 +4009,7 @@ static void build_ins(BuildCtx *ctx, BCOp op, int defop)
     |   slliw TMP1, TMP1, 3			// numparams*8
     |  bxnez TMP0, ->vm_growstack_l
     |2:
-    |  sltu TMP0, NARGS8:RC, TMP1		// Check for missing parameters.
-    |  bnez TMP0, >3
+    |  bltu NARGS8:RC, TMP1, >3		// Check for missing parameters.
     if (op == BC_JFUNCF) {
       |  decode_RD8 RD, INS
       |  j =>BC_JLOOP
-- 
2.42.0

